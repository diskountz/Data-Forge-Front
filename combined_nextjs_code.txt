Directory: cache

File:   config.json

{
	"telemetry": {
		"enabled": false
	}
}
----------------------------------------

Directory: components

File:   AdminLayout.js

// File: components/AdminLayout.js
import { useSupabaseClient, useSession } from '@supabase/auth-helpers-react'
import { useRouter } from 'next/router'
import Link from 'next/link'
import { useEffect } from 'react'

export default function AdminLayout({ children }) {
  const session = useSession()
  const supabase = useSupabaseClient()
  const router = useRouter()

  useEffect(() => {
    if (!session) {
      router.push('/auth/signin')
    }
  }, [session])

  const handleSignOut = async () => {
    await supabase.auth.signOut()
    router.push('/auth/signin')
  }

  if (!session) return null

  return (
    <div className="min-h-screen bg-gray-100">
      {/* Top Navigation */}
      <nav className="bg-white shadow-sm">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between h-16">
            <div className="flex">
              <div className="flex-shrink-0 flex items-center">
                <Link href="/admin">
                  <span className="text-2xl font-bold text-emerald-pool cursor-pointer">
                    Data Forge CMS
                  </span>
                </Link>
              </div>
              <div className="hidden sm:ml-6 sm:flex sm:space-x-8">
                <Link href="/admin">
                  <span className={`inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium ${
                    router.pathname === '/admin' 
                      ? 'border-emerald-pool text-gray-900' 
                      : 'border-transparent text-gray-500 hover:text-gray-700'
                  } cursor-pointer`}>
                    Dashboard
                  </span>
                </Link>
                <Link href="/admin/posts">
                  <span className={`inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium ${
                    router.pathname.startsWith('/admin/posts')
                      ? 'border-emerald-pool text-gray-900'
                      : 'border-transparent text-gray-500 hover:text-gray-700'
                  } cursor-pointer`}>
                    Posts
                  </span>
                </Link>
                <Link href="/admin/categories">
                  <span className={`inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium ${
                    router.pathname.startsWith('/admin/categories')
                      ? 'border-emerald-pool text-gray-900'
                      : 'border-transparent text-gray-500 hover:text-gray-700'
                  } cursor-pointer`}>
                    Categories
                  </span>
                </Link>
              </div>
            </div>
            <div className="flex items-center">
              <button
                onClick={handleSignOut}
                className="ml-3 inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-emerald-pool hover:bg-opacity-90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-emerald-pool"
              >
                Sign Out
              </button>
            </div>
          </div>
        </div>
      </nav>

      {/* Main Content */}
      <div className="py-10">
        <main>
          <div className="max-w-7xl mx-auto sm:px-6 lg:px-8">
            {children}
          </div>
        </main>
      </div>
    </div>
  )
}
----------------------------------------

File:   ContactEnrichmentForm.js

import { useState } from 'react';
import { ArrowRight } from 'lucide-react';  // Add this import
import EnrichmentResultPopup from './EnrichmentResultPopup';

export default function ContactEnrichmentForm() {
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    companyDomain: '',
    linkedinUrl: '',
    findEmail: false,
    getCompanyEmails: false,
    enrichLinkedIn: false,
    findPhone: false,
  });
  const [showPopup, setShowPopup] = useState(false);
  const [isLoading, setIsLoading] = useState(false);

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData(prevState => ({
      ...prevState,
      [name]: type === 'checkbox' ? checked : value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 2000));
    setIsLoading(false);
    setShowPopup(true);
  };

  return (
    <>
      <form onSubmit={handleSubmit} className="bg-white p-6 rounded-lg shadow-sm space-y-6">
        <h2 className="text-[20px] font-semibold tracking-tight text-notion-default mb-4">Try Data Enrichment</h2>
        <div className="space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label htmlFor="firstName" className="block text-[14px] font-medium text-notion-default mb-1.5">
                First Name
              </label>
              <input
                type="text"
                id="firstName"
                name="firstName"
                value={formData.firstName}
                onChange={handleChange}
                className="w-full px-3 py-2 bg-notion-hover border border-notion-border rounded-lg text-[14px] placeholder-notion-gray/50 focus:outline-none focus:ring-2 focus:ring-primary-blue/20 focus:border-primary-blue transition-all"
                placeholder="John"
              />
            </div>
            <div>
              <label htmlFor="lastName" className="block text-[14px] font-medium text-notion-default mb-1.5">
                Last Name
              </label>
              <input
                type="text"
                id="lastName"
                name="lastName"
                value={formData.lastName}
                onChange={handleChange}
                className="w-full px-3 py-2 bg-notion-hover border border-notion-border rounded-lg text-[14px] placeholder-notion-gray/50 focus:outline-none focus:ring-2 focus:ring-primary-blue/20 focus:border-primary-blue transition-all"
                placeholder="Doe"
              />
            </div>
          </div>

          <div>
            <label htmlFor="companyDomain" className="block text-[14px] font-medium text-notion-default mb-1.5">
              Company Domain
            </label>
            <input
              type="text"
              id="companyDomain"
              name="companyDomain"
              value={formData.companyDomain}
              onChange={handleChange}
              className="w-full px-3 py-2 bg-notion-hover border border-notion-border rounded-lg text-[14px] placeholder-notion-gray/50 focus:outline-none focus:ring-2 focus:ring-primary-blue/20 focus:border-primary-blue transition-all"
              placeholder="acmeinc.com"
            />
          </div>

          <div>
            <label htmlFor="linkedinUrl" className="block text-[14px] font-medium text-notion-default mb-1.5">
              LinkedIn URL
            </label>
            <input
              type="text"
              id="linkedinUrl"
              name="linkedinUrl"
              value={formData.linkedinUrl}
              onChange={handleChange}
              className="w-full px-3 py-2 bg-notion-hover border border-notion-border rounded-lg text-[14px] placeholder-notion-gray/50 focus:outline-none focus:ring-2 focus:ring-primary-blue/20 focus:border-primary-blue transition-all"
              placeholder="https://www.linkedin.com/in/username"
            />
          </div>
        </div>

        <div className="space-y-3">
          <h3 className="text-[14px] font-medium text-notion-default">Enrichment Options</h3>
          <div className="space-y-2">
            <label className="flex items-center">
              <input
                type="checkbox"
                name="findEmail"
                checked={formData.findEmail}
                onChange={handleChange}
                className="w-4 h-4 text-primary-blue rounded border-notion-border focus:ring-primary-blue/20"
              />
              <span className="ml-2 text-[14px] text-notion-default">Find Individual Email</span>
            </label>
            <label className="flex items-center">
              <input
                type="checkbox"
                name="getCompanyEmails"
                checked={formData.getCompanyEmails}
                onChange={handleChange}
                className="w-4 h-4 text-primary-blue rounded border-notion-border focus:ring-primary-blue/20"
              />
              <span className="ml-2 text-[14px] text-notion-default">Get Company Emails</span>
            </label>
            <label className="flex items-center">
              <input
                type="checkbox"
                name="enrichLinkedIn"
                checked={formData.enrichLinkedIn}
                onChange={handleChange}
                className="w-4 h-4 text-primary-blue rounded border-notion-border focus:ring-primary-blue/20"
              />
              <span className="ml-2 text-[14px] text-notion-default">Enrich LinkedIn</span>
            </label>
            <label className="flex items-center">
              <input
                type="checkbox"
                name="findPhone"
                checked={formData.findPhone}
                onChange={handleChange}
                className="w-4 h-4 text-primary-blue rounded border-notion-border focus:ring-primary-blue/20"
              />
              <span className="ml-2 text-[14px] text-notion-default">Find Phone Number</span>
            </label>
          </div>
        </div>

        <button
          type="submit"
          disabled={isLoading}
          className="w-full py-2.5 px-4 bg-napoleon hover:bg-napoleon/90 text-white rounded-lg font-medium text-[14px] flex items-center justify-center space-x-2 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          {isLoading ? (
            <>
              <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
              <span>Enriching Data...</span>
            </>
          ) : (
            <>
              <span>Enrich Data</span>
              <ArrowRight className="ml-2 w-4 h-4" />
            </>
          )}
        </button>

        <p className="text-[12px] text-notion-gray text-center mt-4">
          Try our data enrichment tool with sample data
        </p>
      </form>

      {showPopup && (
        <EnrichmentResultPopup
          onClose={() => setShowPopup(false)}
          formData={formData}
        />
      )}
    </>
  );
}
----------------------------------------

File:   EnrichmentResultPopup.js

import { useState } from 'react';
import { ArrowRight } from 'lucide-react';  // Add this import

export default function EnrichmentResultPopup({ onClose, formData }) {
  const handleCreateAccount = () => {
    window.location.href = 'https://app.dataforge.so';
  };

  const blurredEmail = 'user@example.com';
  const blurredPhone = '+1 (555) 123-4567';
  const blurredLinkedIn = 'LinkedIn profile enriched with 20+ data points';
  const blurredCompanyEmails = '5 company email formats found';

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-white rounded-lg p-6 max-w-md w-full">
        <h2 className="text-2xl font-bold text-notion-default mb-4">Enrichment Results</h2>

        <div className="mb-4">
          <p className="font-semibold text-notion-default">
            Enriched data for: {formData.firstName} {formData.lastName}
          </p>
          <p className="text-sm text-notion-gray">
            Company: {formData.companyDomain}
          </p>
        </div>

        <div className="mb-6">
          <p className="font-semibold mb-2 text-notion-default">Results:</p>
          <div className="space-y-3">
            {formData.findEmail && (
              <div className="flex justify-between items-center">
                <span className="text-notion-default">Email:</span>
                <span className="blur-sm select-none">{blurredEmail}</span>
              </div>
            )}
            {formData.findPhone && (
              <div className="flex justify-between items-center">
                <span className="text-notion-default">Phone:</span>
                <span className="blur-sm select-none">{blurredPhone}</span>
              </div>
            )}
            {formData.enrichLinkedIn && (
              <div className="flex justify-between items-center">
                <span className="text-notion-default">LinkedIn:</span>
                <span className="blur-sm select-none">{blurredLinkedIn}</span>
              </div>
            )}
            {formData.getCompanyEmails && (
              <div className="flex justify-between items-center">
                <span className="text-notion-default">Company Emails:</span>
                <span className="blur-sm select-none">{blurredCompanyEmails}</span>
              </div>
            )}
          </div>
        </div>

        <div className="space-y-3">
          <button
            onClick={handleCreateAccount}
            className="w-full inline-flex items-center justify-center px-6 py-3 bg-emerald-pool hover:bg-emerald-pool/90 text-white rounded-lg text-[16px] font-medium transition-colors group"
          >
            Register to View Results
            <ArrowRight className="ml-2 w-4 h-4 group-hover:translate-x-1" />
          </button>

          <button
            onClick={onClose}
            className="w-full py-2.5 px-4 bg-notion-hover hover:bg-notion-border text-napoleon rounded-lg font-medium text-[14px] transition-all duration-200"
          >
            Close
          </button>
        </div>
      </div>
    </div>
  );
}
----------------------------------------

File:   Footer.js

// components/Footer.js

export default function Footer() {
  return (
    <footer className="bg-parfait bg-opacity-20 py-12">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="grid grid-cols-2 md:grid-cols-4 gap-8">
          <div>
            <h3 className="text-lg font-semibold text-daring-indigo mb-4">Product</h3>
            <ul className="space-y-2">
              <li><a href="#" className="text-napoleon hover:text-emerald-pool transition duration-300">Features</a></li>
              <li><a href="#" className="text-napoleon hover:text-emerald-pool transition duration-300">Pricing</a></li>
              <li><a href="#" className="text-napoleon hover:text-emerald-pool transition duration-300">Case Studies</a></li>
            </ul>
          </div>
          <div>
            <h3 className="text-lg font-semibold text-daring-indigo mb-4">Company</h3>
            <ul className="space-y-2">
              <li><a href="#" className="text-napoleon hover:text-emerald-pool transition duration-300">About Us</a></li>
              <li><a href="#" className="text-napoleon hover:text-emerald-pool transition duration-300">Careers</a></li>
              <li><a href="#" className="text-napoleon hover:text-emerald-pool transition duration-300">Contact</a></li>
            </ul>
          </div>
          <div>
            <h3 className="text-lg font-semibold text-daring-indigo mb-4">Resources</h3>
            <ul className="space-y-2">
              <li><a href="#" className="text-napoleon hover:text-emerald-pool transition duration-300">Blog</a></li>
              <li><a href="#" className="text-napoleon hover:text-emerald-pool transition duration-300">Help Center</a></li>
              <li><a href="#" className="text-napoleon hover:text-emerald-pool transition duration-300">API Documentation</a></li>
            </ul>
          </div>
          <div>
            <h3 className="text-lg font-semibold text-daring-indigo mb-4">Legal</h3>
            <ul className="space-y-2">
              <li><a href="#" className="text-napoleon hover:text-emerald-pool transition duration-300">Privacy Policy</a></li>
              <li><a href="#" className="text-napoleon hover:text-emerald-pool transition duration-300">Terms of Service</a></li>
              <li><a href="#" className="text-napoleon hover:text-emerald-pool transition duration-300">GDPR Compliance</a></li>
            </ul>
          </div>
        </div>
        <div className="mt-8 pt-8 border-t border-gray-200 text-center">
          <p className="text-napoleon">&copy; {new Date().getFullYear()} Data Forge. All rights reserved.</p>
        </div>
      </div>
    </footer>
  );
}
----------------------------------------

File:   Header.js

// File: components/Header.js
import Link from 'next/link';
import Image from 'next/image';
import { motion } from 'framer-motion';
import { ArrowRight } from 'lucide-react';  // Add this import

export default function Header() {
  return (
    <header className="bg-white shadow-md pt-4"> {/* Added pt-4 for top padding */}
      <nav className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between items-center h-16">
          <div className="flex-shrink-0">
            <Link href="/">
              <a className="flex items-center">
                <Image
                  src="/logo.png" // Place your logo in the public folder
                  alt="Data Forge"
                  width={150} // Adjust based on your logo's dimensions
                  height={45} // Adjust based on your logo's dimensions
                  className="w-auto h-auto"
                  priority // This ensures the logo loads first
                />
              </a>
            </Link>
          </div>

          <div className="hidden md:flex md:items-center md:space-x-8">
            <Link href="/features">
              <a className="text-napoleon hover:text-emerald-pool transition duration-300">Features</a>
            </Link>
            <Link href="/blog">
              <a className="text-napoleon hover:text-emerald-pool transition duration-300">Blog</a>
            </Link>
            <Link href="/pricing">
              <a className="text-napoleon hover:text-emerald-pool transition duration-300">Pricing</a>
            </Link>
            <Link href="/testimonials">
              <a className="text-napoleon hover:text-emerald-pool transition duration-300">Testimonials</a>
            </Link>
          </div>

          <div className="flex items-center space-x-4">
            <button
              onClick={() => window.location.href = 'https://app.dataforge.so'}
              className="text-napoleon hover:text-emerald-pool transition duration-300"
            >
              Login
            </button>
            <button
              onClick={() => window.location.href = 'https://app.dataforge.so'}
              className="bg-emerald-pool text-white px-4 py-2 rounded-lg hover:bg-opacity-90 transition duration-300"
            >
              Get Started
            </button>
          </div>
        </div>
      </nav>
    </header>
  );
}

----------------------------------------

File:   ImageUpload.js

// File: components/ImageUpload.js
import { useState } from 'react'
import { useSupabaseClient } from '@supabase/auth-helpers-react'
import { v4 as uuidv4 } from 'uuid'

export default function ImageUpload({ onUpload }) {
  const [uploading, setUploading] = useState(false)
  const supabase = useSupabaseClient()

  async function handleUpload(event) {
    try {
      setUploading(true)

      if (!event.target.files || event.target.files.length === 0) {
        throw new Error('You must select an image to upload.')
      }

      const file = event.target.files[0]
      const fileExt = file.name.split('.').pop()
      const fileName = `${uuidv4()}.${fileExt}`
      const filePath = `post-images/${fileName}`

      const { error: uploadError } = await supabase.storage
        .from('media')
        .upload(filePath, file)

      if (uploadError) {
        throw uploadError
      }

      const { data: { publicUrl } } = supabase.storage
        .from('media')
        .getPublicUrl(filePath)

      onUpload(publicUrl)
    } catch (error) {
      alert(error.message)
    } finally {
      setUploading(false)
    }
  }

  return (
    <div>
      <label className="block text-sm font-medium text-gray-700">
        Featured Image
      </label>
      <div className="mt-1 flex items-center">
        <input
          type="file"
          accept="image/*"
          onChange={handleUpload}
          disabled={uploading}
          className="block w-full text-sm text-gray-500
            file:mr-4 file:py-2 file:px-4
            file:rounded-md file:border-0
            file:text-sm file:font-semibold
            file:bg-emerald-pool file:text-white
            hover:file:bg-emerald-pool/90"
        />
        {uploading && <span className="ml-2">Uploading...</span>}
      </div>
    </div>
  )
}
----------------------------------------

File:   MainLayout.js

// File: components/MainLayout.js
import Link from 'next/link';
import Header from './Header';
import Footer from './Footer';

export default function MainLayout({ children }) {
  return (
    <div className="min-h-screen flex flex-col">
      {/* Added a top margin to create space between the top bar and the header */}
      <nav className="bg-white border-b mt-4"> {/* Adjust mt-4 as needed */}
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between h-16">
            <div className="flex items-center">
              <Link href="/">
                <span className="text-2xl font-bold text-daring-indigo cursor-pointer flex items-center">
                  <img
                    className="h-8 w-auto mr-2"
                    src="/logo.svg"
                    alt="Data Forge"
                  />
                  Data Forge
                </span>
              </Link>
              <div className="hidden sm:ml-6 sm:flex sm:space-x-8">
                <Link href="#features">
                  <span className="text-napoleon hover:text-emerald-pool transition duration-300 inline-flex items-center px-1 pt-1 border-b-2 border-transparent hover:border-emerald-pool">
                    Features
                  </span>
                </Link>
                <Link href="/blog">
                  <span className="text-napoleon hover:text-emerald-pool transition duration-300 inline-flex items-center px-1 pt-1 border-b-2 border-transparent hover:border-emerald-pool">
                    Blog
                  </span>
                </Link>
                <Link href="/pricing">
                  <span className="text-napoleon hover:text-emerald-pool transition duration-300 inline-flex items-center px-1 pt-1 border-b-2 border-transparent hover:border-emerald-pool">
                    Pricing
                  </span>
                </Link>
                <Link href="#testimonials">
                  <span className="text-napoleon hover:text-emerald-pool transition duration-300 inline-flex items-center px-1 pt-1 border-b-2 border-transparent hover:border-emerald-pool">
                    Testimonials
                  </span>
                </Link>
              </div>
            </div>
            <div className="hidden sm:flex sm:items-center sm:space-x-4">
              <Link href="/auth/signin">
                <span className="text-napoleon hover:text-emerald-pool transition duration-300 px-3 py-2 cursor-pointer">
                  Login
                </span>
              </Link>
              <Link href="/auth/signup">
                <span className="bg-emerald-pool text-white px-4 py-2 rounded-lg hover:bg-opacity-90 transition duration-300 cursor-pointer">
                  Get Started
                </span>
              </Link>
            </div>
          </div>
        </div>
      </nav>

      <main className="flex-grow">
        {children}
      </main>

      <Footer />
    </div>
  );
}

----------------------------------------

Directory:   PostEditor

File:     index.js

import { useState, useEffect } from 'react'
import { useSupabaseClient } from '@supabase/auth-helpers-react'
import { useRouter } from 'next/router'
import { Alert, AlertDescription } from '../ui/alert'
import RichTextEditor from '../RichTextEditor'
import ImageUpload from '../ImageUpload'

export default function PostEditor({ postId }) {
  const router = useRouter()
  const supabase = useSupabaseClient()
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState(null)
  const [content, setContent] = useState('')
  const [categories, setCategories] = useState([])
  const [selectedCategories, setSelectedCategories] = useState([])
  const [formData, setFormData] = useState({
    title: '',
    slug: '',
    excerpt: '',
    featured_image: '',
    featured_image_alt: '',
    status: 'draft',
    meta_title: '',
    meta_description: '',
    canonical_url: '',
    social_image: '',
    social_image_alt: '',
    is_featured: false,
  })

  useEffect(() => {
    fetchCategories()
    if (postId) {
      fetchPost()
    }
  }, [postId])

  async function fetchCategories() {
    try {
      const { data, error } = await supabase
        .from('categories')
        .select('*')
        .order('name')

      if (error) throw error
      setCategories(data || [])
    } catch (error) {
      console.error('Error fetching categories:', error)
      setError('Failed to load categories')
    }
  }

  async function fetchPost() {
    try {
      const { data, error } = await supabase
        .from('posts')
        .select(`
          *,
          posts_categories(category_id)
        `)
        .eq('id', postId)
        .single()

      if (error) throw error

      if (data) {
        setFormData({
          ...data,
          meta_title: data.meta_title || data.title,
          meta_description: data.meta_description || data.excerpt,
          featured_image_alt: data.featured_image_alt || '',
          social_image_alt: data.social_image_alt || ''
        })
        setContent(data.content || '')
        setSelectedCategories(data.posts_categories.map(pc => pc.category_id))
      }
    } catch (error) {
      console.error('Error fetching post:', error)
      setError('Failed to load post')
    }
  }

  function handleImageUpload(field, url) {
    setFormData(prev => ({
      ...prev,
      [field]: url
    }))
  }

  async function handleChange(e) {
    const { name, value, type, checked } = e.target
    const newValue = type === 'checkbox' ? checked : value

    setFormData(prev => ({
      ...prev,
      [name]: newValue
    }))

    if (name === 'title' && !postId) {
      const baseSlug = value
        .toLowerCase()
        .replace(/[^a-z0-9]+/g, '-')
        .replace(/(^-|-$)/g, '')
      setFormData(prev => ({
        ...prev,
        slug: baseSlug
      }))
    }
  }

  function handleContentUpdate(newContent) {
    setContent(newContent)
  }

  async function handleSubmit(e) {
    e.preventDefault()
    setLoading(true)
    setError(null)

    try {
      const { data: { user }, error: userError } = await supabase.auth.getUser()
      if (userError) throw new Error('Authentication error')
      if (!user) throw new Error('No authenticated user found')

      const postData = {
        title: formData.title,
        slug: formData.slug,
        content: content,
        excerpt: formData.excerpt,
        featured_image: formData.featured_image,
        featured_image_alt: formData.featured_image_alt,
        status: formData.status,
        meta_title: formData.meta_title,
        meta_description: formData.meta_description,
        canonical_url: formData.canonical_url,
        social_image: formData.social_image,
        social_image_alt: formData.social_image_alt,
        is_featured: formData.is_featured,
        updated_at: new Date().toISOString()
      }

      let post
      if (postId) {
        const { data, error } = await supabase
          .from('posts')
          .update(postData)
          .eq('id', postId)
          .select()
          .single()

        if (error) throw error
        post = data
      } else {
        const { data, error } = await supabase
          .from('posts')
          .insert([{
            ...postData,
            author_id: user.id,
            created_at: new Date().toISOString()
          }])
          .select()
          .single()

        if (error) throw error
        post = data
      }

      if (post) {
        if (postId) {
          await supabase
            .from('posts_categories')
            .delete()
            .eq('post_id', postId)
        }

        let categoriesToAssign = selectedCategories

        if (categoriesToAssign.length === 0) {
          const { data: generalCat, error: findError } = await supabase
            .from('categories')
            .select('id')
            .eq('slug', 'general')
            .single()

          if (findError || !generalCat) {
            const { data: newCat, error: createError } = await supabase
              .from('categories')
              .insert([{
                name: 'General',
                slug: 'general',
                description: 'General category for uncategorized posts'
              }])
              .select()
              .single()

            if (createError) throw createError
            categoriesToAssign = [newCat.id]
          } else {
            categoriesToAssign = [generalCat.id]
          }
        }

        const { error: categoriesError } = await supabase
          .from('posts_categories')
          .insert(
            categoriesToAssign.map(categoryId => ({
              post_id: post.id,
              category_id: categoryId
            }))
          )

        if (categoriesError) throw categoriesError
      }

      router.push('/admin/posts')
    } catch (error) {
      console.error('Error saving post:', error)
      setError(error.message)
    } finally {
      setLoading(false)
    }
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      {error && (
        <Alert variant="destructive">
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}

      <div className="grid grid-cols-3 gap-6">
        <div className="col-span-2 space-y-6">
          {/* Main Content */}
          <div className="space-y-4">
            <input
              type="text"
              name="title"
              value={formData.title}
              onChange={handleChange}
              placeholder="Post Title"
              className="w-full text-4xl font-bold border-0 border-b border-gray-200 focus:ring-0 focus:border-emerald-pool break-words"
              style={{ wordWrap: 'break-word', overflowWrap: 'break-word' }}
              required
            />

            {/* Featured Image Section */}
            <div className="bg-white p-6 rounded-lg shadow-sm space-y-4">
              <h3 className="text-lg font-medium text-gray-900">Featured Image</h3>
              <ImageUpload
                currentImage={formData.featured_image}
                onUpload={(url) => handleImageUpload('featured_image', url)}
                label="Featured Image"
              />
              <div>
                <label className="block text-sm font-medium text-gray-700">
                  Alt Text
                </label>
                <input
                  type="text"
                  name="featured_image_alt"
                  value={formData.featured_image_alt}
                  onChange={handleChange}
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-emerald-pool focus:ring focus:ring-emerald-pool focus:ring-opacity-50"
                  placeholder="Describe the image for accessibility"
                />
              </div>
            </div>

            <div className="prose prose-lg max-w-none">
              <RichTextEditor
                content={content}
                onUpdate={handleContentUpdate}
              />
            </div>
          </div>

          {/* SEO and Meta */}
          <div className="bg-white p-6 rounded-lg shadow-sm space-y-4">
            <h3 className="text-lg font-medium text-gray-900">SEO & Meta</h3>

            <div>
              <label className="block text-sm font-medium text-gray-700">
                Meta Title
                <span className="text-sm text-gray-500 ml-2">
                  ({formData.meta_title?.length || 0}/70)
                </span>
              </label>
              <input
                type="text"
                name="meta_title"
                value={formData.meta_title || ''}
                onChange={handleChange}
                maxLength={70}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-emerald-pool focus:ring focus:ring-emerald-pool focus:ring-opacity-50"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700">
                Meta Description
                <span className="text-sm text-gray-500 ml-2">
                  ({formData.meta_description?.length || 0}/160)
                </span>
              </label>
              <textarea
                name="meta_description"
                value={formData.meta_description || ''}
                onChange={handleChange}
                maxLength={160}
                rows={3}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-emerald-pool focus:ring focus:ring-emerald-pool focus:ring-opacity-50"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700">
                Canonical URL
              </label>
              <input
                type="url"
                name="canonical_url"
                value={formData.canonical_url || ''}
                onChange={handleChange}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-emerald-pool focus:ring focus:ring-emerald-pool focus:ring-opacity-50"
              />
            </div>
          </div>

          {/* Social Share Image */}
          <div className="bg-white p-6 rounded-lg shadow-sm space-y-4">
            <h3 className="text-lg font-medium text-gray-900">Social Share Image</h3>
            <ImageUpload
              currentImage={formData.social_image}
              onUpload={(url) => handleImageUpload('social_image', url)}
              label="Social Share Image"
              hint="Recommended: 1200x630px"
            />
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Social Image Alt Text
              </label>
              <input
                type="text"
                name="social_image_alt"
                value={formData.social_image_alt}
                onChange={handleChange}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-emerald-pool focus:ring focus:ring-emerald-pool focus:ring-opacity-50"
                placeholder="Describe the social share image for accessibility"
              />
            </div>
          </div>
        </div>

        <div className="space-y-6">
          {/* Sidebar */}
          <div className="bg-white p-6 rounded-lg shadow-sm space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Slug
              </label>
              <input
                type="text"
                name="slug"
                value={formData.slug}
                onChange={handleChange}
                required
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-emerald-pool focus:ring focus:ring-emerald-pool focus:ring-opacity-50"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700">
                Status
              </label>
              <select
                name="status"
                value={formData.status}
                onChange={handleChange}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-emerald-pool focus:ring focus:ring-emerald-pool focus:ring-opacity-50"
              >
                <option value="draft">Draft</option>
                <option value="published">Published</option>
                <option value="archived">Archived</option>
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700">
                Categories
              </label>
              <div className="mt-2 space-y-2">
                {categories.map(category => (
                  <label key={category.id} className="flex items-center">
                    <input
                      type="checkbox"
                      checked={selectedCategories.includes(category.id)}
                      onChange={(e) => {
                        if (e.target.checked) {
                          setSelectedCategories([...selectedCategories, category.id])
                        } else {
                          setSelectedCategories(selectedCategories.filter(id => id !== category.id))
                        }
                      }}
                      className="rounded border-gray-300 text-emerald-pool focus:ring-emerald-pool"
                    />
                    <span className="ml-2">{category.name}</span>
                  </label>
                ))}
              </div>
            </div>

            <div>
              <label className="flex items-center">
                <input
                  type="checkbox"
                  name="is_featured"
                  checked={formData.is_featured}
                  onChange={handleChange}
                  className="rounded border-gray-300 text-emerald-pool focus:ring-emerald-pool"
                />
                <span className="ml-2">Featured Post</span>
              </label>
            </div>
          </div>

          <div className="flex space-x-4">
            <button
              type="submit"
              disabled={loading}
              className="flex-1 py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-emerald-pool hover:bg-emerald-pool/90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-emerald-pool disabled:opacity-50"
            >
              {loading ? 'Saving...' : postId ? 'Update' : 'Publish'}
            </button>
          </div>
        </div>
      </div>
    </form>
  )
}
----------------------------------------

File:     TableOfContents.js

// File: components/PostEditor/TableOfContents.js
import { useEffect, useState } from 'react'

export default function TableOfContents({ content }) {
  const [activeId, setActiveId] = useState('')
  const [headings, setHeadings] = useState([])

  useEffect(() => {
    if (!content) return

    const parser = new DOMParser()
    const doc = parser.parseFromString(content, 'text/html')
    const headingElements = doc.querySelectorAll('h2')

    const extractedHeadings = Array.from(headingElements).map((heading, index) => {
      const id = heading.id || `heading-${index}`
      return {
        id,
        text: heading.textContent.trim()
      }
    })

    setHeadings(extractedHeadings)

    // Add IDs to actual document headings if they don't exist
    document.querySelectorAll('h2').forEach((heading, index) => {
      if (!heading.id) {
        heading.id = `heading-${index}`
      }
    })
  }, [content])

  useEffect(() => {
    const callback = (entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          setActiveId(entry.target.id)
        }
      })
    }

    const observer = new IntersectionObserver(callback, {
      rootMargin: '-20% 0% -35% 0%',
      threshold: 0
    })

    document.querySelectorAll('h2[id]').forEach((element) => {
      observer.observe(element)
    })

    return () => observer.disconnect()
  }, [headings])

  const scrollToHeading = (id) => {
    const element = document.getElementById(id)
    if (!element) return

    const header = document.querySelector('header')
    const headerOffset = header ? header.offsetHeight : 0
    const elementPosition = element.getBoundingClientRect().top + window.scrollY
    const offsetPosition = elementPosition - headerOffset - 24

    window.scrollTo({
      top: offsetPosition,
      behavior: 'smooth'
    })
  }

  if (headings.length === 0) return null

  return (
    <nav 
      className="sticky top-24 w-full bg-white rounded-lg p-6 shadow-sm"
      aria-label="Table of contents"
    >
      <div className="border-b border-gray-200 pb-4">
        <h4 className="text-lg font-bold text-[#6B46C1]">In this article</h4>
      </div>
      <div className="mt-4 max-h-[calc(100vh-250px)] overflow-y-auto pr-2 -mr-2 scroll-smooth">
        <ul className="space-y-3">
          {headings.map((heading) => (
            <li key={heading.id}>
              <button
                onClick={() => scrollToHeading(heading.id)}
                className={`
                  group block w-full text-left py-2 pl-4 border-l-2 text-sm transition-all duration-200
                  ${activeId === heading.id 
                    ? 'border-[#6B46C1] text-[#6B46C1] font-medium' 
                    : 'border-gray-200 text-gray-600 hover:text-[#6B46C1] hover:border-[#6B46C1]'
                  }
                `}
              >
                {heading.text}
                <span 
                  className={`
                    ml-2 opacity-0 group-hover:opacity-100 transition-opacity duration-200
                    ${activeId === heading.id ? 'opacity-100' : ''}
                  `}
                >
                  →
                </span>
              </button>
            </li>
          ))}
        </ul>
      </div>
    </nav>
  )
}
----------------------------------------

File:   RelatedPosts.js

// File: components/RelatedPosts.js
import Link from 'next/link'
import { format } from 'date-fns'

export default function RelatedPosts({ currentPost, posts }) {
  if (!posts?.length) return null

  return (
    <div className="py-12 border-t border-gray-200">
      <h2 className="text-2xl font-bold text-gray-900 mb-8">Related Articles</h2>
      <div className="grid gap-8 md:grid-cols-2 lg:grid-cols-3">
        {posts.map((post) => (
          <article key={post.id} className="group">
            {post.featured_image && (
              <Link href={`/blog/${post.slug}`}>
                <div className="relative rounded-lg overflow-hidden mb-4 aspect-[16/9]">
                  <img
                    src={post.featured_image}
                    alt={post.title}
                    className="absolute inset-0 w-full h-full object-cover transform group-hover:scale-105 transition-transform duration-300"
                  />
                </div>
              </Link>
            )}
            <div>
              {post.categories?.map((cat) => (
                <span
                  key={cat.id}
                  className="inline-block text-xs font-medium text-emerald-pool mb-2 mr-2"
                >
                  {cat.name}
                </span>
              ))}
              <Link href={`/blog/${post.slug}`}>
                <h3 className="text-xl font-bold text-gray-900 group-hover:text-emerald-pool transition-colors mb-2">
                  {post.title}
                </h3>
              </Link>
              <p className="text-gray-600 text-sm mb-4 line-clamp-2">
                {post.excerpt}
              </p>
              <div className="flex items-center text-sm text-gray-500">
                <span>{format(new Date(post.published_at), 'MMM d, yyyy')}</span>
                <span className="mx-2">·</span>
                <span>{post.estimated_read_time} min read</span>
              </div>
            </div>
          </article>
        ))}
      </div>
    </div>
  )
}
----------------------------------------

File:   RichTextEditor.js

// File: components/RichTextEditor.js
import { useEditor, EditorContent } from '@tiptap/react'
import StarterKit from '@tiptap/starter-kit'
import Link from '@tiptap/extension-link'
import Image from '@tiptap/extension-image'
import CodeBlock from '@tiptap/extension-code-block'
import Table from '@tiptap/extension-table'
import TableRow from '@tiptap/extension-table-row'
import TableCell from '@tiptap/extension-table-cell'
import TableHeader from '@tiptap/extension-table-header'
import TextAlign from '@tiptap/extension-text-align'
import Underline from '@tiptap/extension-underline'
import Superscript from '@tiptap/extension-superscript'
import Subscript from '@tiptap/extension-subscript'
import Highlight from '@tiptap/extension-highlight'
import TaskList from '@tiptap/extension-task-list'
import TaskItem from '@tiptap/extension-task-item'
import { useSupabaseClient } from '@supabase/auth-helpers-react'
import { useEffect } from 'react'
import { 
  Bold, 
  Italic, 
  Underline as UnderlineIcon, 
  Strikethrough,
  Highlighter,
  Superscript as SuperscriptIcon,
  Subscript as SubscriptIcon,
  AlignLeft,
  AlignCenter,
  AlignRight,
  AlignJustify,
  Heading1,
  Heading2,
  Heading3,
  Heading4,
  List,
  ListOrdered,
  CheckSquare,
  Quote,
  Code2,
  Table as TableIcon,
  Trash2,
  Column,
  ColumnVertical,
  Row,
  RowVertical,
  Image as ImageIcon,
  Youtube,
  Link as LinkIcon,
  Undo,
  Redo,
  Grid,
  Split,
  Heading
} from 'lucide-react'

const MenuBar = ({ editor }) => {
  const supabase = useSupabaseClient()

  if (!editor) {
    return null
  }

  const addTable = () => {
    editor.chain().focus().insertTable({ rows: 3, cols: 3, withHeaderRow: true }).run()
  }

  const addYoutubeVideo = () => {
    const url = window.prompt('Enter YouTube URL')
    if (url) {
      const videoId = url.match(/(?:youtube\.com\/(?:[^\/]+\/.+\/|(?:v|e(?:mbed)?)\/|.*[?&]v=)|youtu\.be\/)([^"&?\/\s]{11})/)?.[1]
      if (videoId) {
        const html = `<div class="aspect-w-16 aspect-h-9 my-4">
          <iframe src="https://www.youtube.com/embed/${videoId}" 
            frameborder="0" 
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" 
            allowfullscreen
            class="w-full h-full rounded-lg"
          ></iframe>
        </div>`
        editor.chain().focus().insertContent(html).run()
      }
    }
  }

  const handleImageUpload = async (event) => {
    const file = event.target.files?.[0]
    if (!file) return

    try {
      const fileExt = file.name.split('.').pop()
      const fileName = `${Math.random()}.${fileExt}`
      const filePath = `blog-images/${fileName}`

      const { error: uploadError } = await supabase.storage
        .from('media')
        .upload(filePath, file)

      if (uploadError) throw uploadError

      const { data: { publicUrl } } = supabase.storage
        .from('media')
        .getPublicUrl(filePath)

      editor.chain().focus().setImage({ src: publicUrl }).run()
    } catch (error) {
      console.error('Error uploading image:', error)
    }
  }

  const buttonStyle = (isActive = false) => `p-2 rounded hover:bg-gray-100 ${
    isActive ? 'bg-emerald-pool text-white' : 'bg-gray-50'
  }`

  return (
    <div className="border-b flex flex-wrap gap-1 p-2">
      {/* Text Style Controls */}
      <div className="flex gap-1 border-r pr-2">
        <button
          type="button"
          onClick={() => editor.chain().focus().toggleBold().run()}
          className={buttonStyle(editor.isActive('bold'))}
          title="Bold"
        >
          <Bold size={16} />
        </button>
        <button
          type="button"
          onClick={() => editor.chain().focus().toggleItalic().run()}
          className={buttonStyle(editor.isActive('italic'))}
          title="Italic"
        >
          <Italic size={16} />
        </button>
        <button
          type="button"
          onClick={() => editor.chain().focus().toggleUnderline().run()}
          className={buttonStyle(editor.isActive('underline'))}
          title="Underline"
        >
          <UnderlineIcon size={16} />
        </button>
        <button
          type="button"
          onClick={() => editor.chain().focus().toggleStrike().run()}
          className={buttonStyle(editor.isActive('strike'))}
          title="Strike"
        >
          <Strikethrough size={16} />
        </button>
        <button
          type="button"
          onClick={() => editor.chain().focus().toggleHighlight().run()}
          className={buttonStyle(editor.isActive('highlight'))}
          title="Highlight"
        >
          <Highlighter size={16} />
        </button>
      </div>

      {/* Script Controls */}
      <div className="flex gap-1 border-r pr-2">
        <button
          type="button"
          onClick={() => editor.chain().focus().toggleSuperscript().run()}
          className={buttonStyle(editor.isActive('superscript'))}
          title="Superscript"
        >
          <SuperscriptIcon size={16} />
        </button>
        <button
          type="button"
          onClick={() => editor.chain().focus().toggleSubscript().run()}
          className={buttonStyle(editor.isActive('subscript'))}
          title="Subscript"
        >
          <SubscriptIcon size={16} />
        </button>
      </div>

      {/* Alignment Controls */}
      <div className="flex gap-1 border-r pr-2">
        <button
          type="button"
          onClick={() => editor.chain().focus().setTextAlign('left').run()}
          className={buttonStyle(editor.isActive({ textAlign: 'left' }))}
          title="Align Left"
        >
          <AlignLeft size={16} />
        </button>
        <button
          type="button"
          onClick={() => editor.chain().focus().setTextAlign('center').run()}
          className={buttonStyle(editor.isActive({ textAlign: 'center' }))}
          title="Align Center"
        >
          <AlignCenter size={16} />
        </button>
        <button
          type="button"
          onClick={() => editor.chain().focus().setTextAlign('right').run()}
          className={buttonStyle(editor.isActive({ textAlign: 'right' }))}
          title="Align Right"
        >
          <AlignRight size={16} />
        </button>
        <button
          type="button"
          onClick={() => editor.chain().focus().setTextAlign('justify').run()}
          className={buttonStyle(editor.isActive({ textAlign: 'justify' }))}
          title="Justify"
        >
          <AlignJustify size={16} />
        </button>
      </div>

      {/* Heading Controls */}
      <div className="flex gap-1 border-r pr-2">
        <button
          type="button"
          onClick={() => editor.chain().focus().toggleHeading({ level: 1 }).run()}
          className={buttonStyle(editor.isActive('heading', { level: 1 }))}
          title="Heading 1"
        >
          <Heading1 size={16} />
        </button>
        <button
          type="button"
          onClick={() => editor.chain().focus().toggleHeading({ level: 2 }).run()}
          className={buttonStyle(editor.isActive('heading', { level: 2 }))}
          title="Heading 2"
        >
          <Heading2 size={16} />
        </button>
        <button
          type="button"
          onClick={() => editor.chain().focus().toggleHeading({ level: 3 }).run()}
          className={buttonStyle(editor.isActive('heading', { level: 3 }))}
          title="Heading 3"
        >
          <Heading3 size={16} />
        </button>
        <button
          type="button"
          onClick={() => editor.chain().focus().toggleHeading({ level: 4 }).run()}
          className={buttonStyle(editor.isActive('heading', { level: 4 }))}
          title="Heading 4"
        >
          <Heading4 size={16} />
        </button>
      </div>

      {/* List Controls */}
      <div className="flex gap-1 border-r pr-2">
        <button
          type="button"
          onClick={() => editor.chain().focus().toggleBulletList().run()}
          className={buttonStyle(editor.isActive('bulletList'))}
          title="Bullet List"
        >
          <List size={16} />
        </button>
        <button
          type="button"
          onClick={() => editor.chain().focus().toggleOrderedList().run()}
          className={buttonStyle(editor.isActive('orderedList'))}
          title="Numbered List"
        >
          <ListOrdered size={16} />
        </button>
        <button
          type="button"
          onClick={() => editor.chain().focus().toggleTaskList().run()}
          className={buttonStyle(editor.isActive('taskList'))}
          title="Task List"
        >
          <CheckSquare size={16} />
        </button>
      </div>

      {/* Block Controls */}
      <div className="flex gap-1 border-r pr-2">
        <button
          type="button"
          onClick={() => editor.chain().focus().toggleBlockquote().run()}
          className={buttonStyle(editor.isActive('blockquote'))}
          title="Quote"
        >
          <Quote size={16} />
        </button>
        <button
          type="button"
          onClick={() => editor.chain().focus().toggleCodeBlock().run()}
          className={buttonStyle(editor.isActive('codeBlock'))}
          title="Code Block"
        >
          <Code2 size={16} />
        </button>
      </div>

      {/* Table Controls */}
      <div className="flex gap-1 border-r pr-2">
        <button
          type="button"
          onClick={addTable}
          className={buttonStyle()}
          title="Insert Table"
        >
          <TableIcon size={16} />
        </button>
        {editor.can().deleteTable() && (
          <button
            type="button"
            onClick={() => editor.chain().focus().deleteTable().run()}
            className={buttonStyle()}
            title="Delete Table"
          >
            <Trash2 size={16} />
          </button>
        )}
        {editor.can().addColumnBefore() && (
          <button
            type="button"
            onClick={() => editor.chain().focus().addColumnBefore().run()}
            className={buttonStyle()}
            title="Add Column Before"
          >
            <Column size={16} />
          </button>
        )}
        {editor.can().addColumnAfter() && (
          <button
            type="button"
            onClick={() => editor.chain().focus().addColumnAfter().run()}
            className={buttonStyle()}
            title="Add Column After"
          >
            <ColumnVertical size={16} />
          </button>
        )}
        {editor.can().addRowBefore() && (
          <button
            type="button"
            onClick={() => editor.chain().focus().addRowBefore().run()}
            className={buttonStyle()}
            title="Add Row Before"
          >
            <Row size={16} />
          </button>
        )}
        {editor.can().addRowAfter() && (
          <button
            type="button"
            onClick={() => editor.chain().focus().addRowAfter().run()}
            className={buttonStyle()}
            title="Add Row After"
          >
            <RowVertical size={16} />
          </button>
        )}
      </div>

      {/* Insert Controls */}
      <div className="flex gap-1">
        <label className={`${buttonStyle()} cursor-pointer`} title="Insert Image">
          <ImageIcon size={16} />
          <input
            type="file"
            className="hidden"
            accept="image/*"
            onChange={handleImageUpload}
          />
        </label>
        <button
          type="button"
          onClick={addYoutubeVideo}
          className={buttonStyle()}
          title="Insert YouTube Video"
        >
          <Youtube size={16} />
        </button>
        <button
          type="button"
          onClick={() => {
            const url = window.prompt('Enter URL')
            if (url) {
              editor.chain().focus().setLink({ href: url }).run()
            }
          }}
          className={buttonStyle(editor.isActive('link'))}
          title="Insert Link"
        >
          <LinkIcon size={16} />
        </button>
      </div>

      {/* Undo/Redo Controls */}
      <div className="flex gap-1 border-l pl-2">
        <button
          type="button"
          onClick={() => editor.chain().focus().undo().run()}
          disabled={!editor.can().undo()}
          className={`${buttonStyle()} disabled:opacity-50`}
          title="Undo"
        >
          <Undo size={16} />
        </button>
        <button
          type="button"
          onClick={() => editor.chain().focus().redo().run()}
          disabled={!editor.can().redo()}
          className={`${buttonStyle()} disabled:opacity-50`}
          title="Redo"
        >
          <Redo size={16} />
        </button>
      </div>
    </div>
  )
}

export default function RichTextEditor({ content = '', onUpdate }) {
  const editor = useEditor({
    extensions: [
      StarterKit.configure({
        heading: {
          levels: [1, 2, 3, 4]
        },
      }),
      Link.configure({
        openOnClick: false,
        HTMLAttributes: {
          class: 'text-emerald-pool hover:text-emerald-pool/80 underline'
        }
      }),
      Image.configure({
        HTMLAttributes: {
          class: 'rounded-lg max-w-full',
        }
      }),
      Table.configure({
        resizable: true,
        HTMLAttributes: {
          class: 'border-collapse table-auto w-full',
        },
      }),
      TableRow.configure({
        HTMLAttributes: {
          class: 'border-b border-gray-200',
        },
      }),
      TableHeader.configure({
        HTMLAttributes: {
          class: 'border-b-2 border-gray-300 bg-gray-100 py-3 px-4 text-left font-semibold',
        },
      }),
      TableCell.configure({
        HTMLAttributes: {
          class: 'border border-gray-200 py-2 px-4',
        },
      }),
      TextAlign.configure({
        types: ['heading', 'paragraph', 'image'],
      }),
      Underline,
      Superscript,
      Subscript,
      Highlight.configure({
        multicolor: true,
      }),
      TaskList,
      TaskItem,
      CodeBlock.configure({
        HTMLAttributes: {
          class: 'rounded-lg bg-gray-800 text-white p-4 font-mono text-sm my-4',
        }
      })
    ],
    content,
    onUpdate: ({ editor }) => {
      onUpdate && onUpdate(editor.getHTML())
    },
  })

  // Add this effect to fix content not appearing when editing
  useEffect(() => {
    if (editor && content && editor.getHTML() !== content) {
      const currentCursor = editor.view.state.selection
      editor.commands.setContent(content)
      editor.commands.setTextSelection(currentCursor)
    }
  }, [content, editor])

  return (
    <div className="border rounded-lg overflow-hidden" style={{ height: '600px', display: 'flex', flexDirection: 'column' }}>
      <div style={{ position: 'sticky', top: 0, backgroundColor: 'white', zIndex: 50 }}>
        <MenuBar editor={editor} />
      </div>
      <div style={{ flex: 1, overflow: 'auto', position: 'relative' }}>
        <EditorContent 
          editor={editor} 
          style={{ height: '100%' }}
        />
      </div>

      <style jsx global>{`
        .ProseMirror {
          padding: 1rem;
          min-height: 100%;
          outline: none;
        }

        .ProseMirror p.is-editor-empty:first-child::before {
          color: #adb5bd;
          content: attr(data-placeholder);
          float: left;
          height: 0;
          pointer-events: none;
        }

        .ProseMirror img {
          max-width: 100%;
          height: auto;
          margin: 1rem 0;
        }

        .ProseMirror table {
          border-collapse: collapse;
          table-layout: fixed;
          width: 100%;
          margin: 1rem 0;
        }

        .ProseMirror td,
        .ProseMirror th {
          border: 2px solid #ced4da;
          padding: 8px;
          min-width: 100px;
        }

        .ProseMirror th {
          background-color: #f8f9fa;
          font-weight: bold;
        }

        .ProseMirror blockquote {
          border-left: 4px solid #ced4da;
          margin: 1rem 0;
          padding-left: 1rem;
          color: #6c757d;
        }

        .ProseMirror pre {
          background-color: #343a40;
          color: #f8f9fa;
          padding: 1rem;
          border-radius: 4px;
          overflow-x: auto;
        }

        .ProseMirror ul[data-type="taskList"] {
          list-style: none;
          padding: 0;
        }

        .ProseMirror ul[data-type="taskList"] li {
          display: flex;
          align-items: baseline;
        }

        .ProseMirror ul[data-type="taskList"] li > label {
          margin-right: 0.5rem;
          user-select: none;
        }

        .ProseMirror ul[data-type="taskList"] li > div {
          flex: 1;
        }

        .ProseMirror hr {
          border: none;
          border-top: 2px solid #ced4da;
          margin: 2rem 0;
        }
      `}</style>
    </div>
  )
}
----------------------------------------

File:   SocialShare.js

// components/SocialShare.js
import React from 'react';
import { Twitter, Facebook, Linkedin, Link2, Mail } from 'lucide-react';

export default function SocialShare({ url, title, description }) {
  const encodedUrl = encodeURIComponent(url);
  const encodedTitle = encodeURIComponent(title);
  const encodedDescription = encodeURIComponent(description);

  const shareData = [
    {
      name: 'Twitter',
      icon: Twitter,
      color: '#1DA1F2',
      hoverColor: '#1a8cd8',
      url: `https://twitter.com/intent/tweet?url=${encodedUrl}&text=${encodedTitle}`,
    },
    {
      name: 'Facebook',
      icon: Facebook,
      color: '#1877F2',
      hoverColor: '#166fe5',
      url: `https://www.facebook.com/sharer/sharer.php?u=${encodedUrl}`,
    },
    {
      name: 'LinkedIn',
      icon: Linkedin,
      color: '#0A66C2',
      hoverColor: '#0a5ab8',
      url: `https://www.linkedin.com/sharing/share-offsite/?url=${encodedUrl}`,
    },
    {
      name: 'Email',
      icon: Mail,
      color: '#EA4335',
      hoverColor: '#d33a2c',
      url: `mailto:?subject=${encodedTitle}&body=${encodedDescription}%0A%0A${encodedUrl}`,
    },
  ];

  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(url);
      // You might want to add a toast notification here
      alert('Link copied to clipboard!');
    } catch (err) {
      console.error('Failed to copy:', err);
    }
  };

  return (
    <div className="share-container">
      <h3 className="text-lg font-semibold text-gray-900 mb-4">Share this article</h3>
      <div className="flex flex-wrap gap-3">
        {shareData.map((item) => {
          const Icon = item.icon;
          return (
            <a
              key={item.name}
              href={item.url}
              target="_blank"
              rel="noopener noreferrer"
              className="inline-flex items-center justify-center space-x-2 px-4 py-2 rounded-lg transition-colors duration-200"
              style={{
                backgroundColor: item.color,
                color: 'white',
              }}
              onMouseOver={(e) => e.currentTarget.style.backgroundColor = item.hoverColor}
              onMouseOut={(e) => e.currentTarget.style.backgroundColor = item.color}
            >
              <Icon size={20} />
              <span>{item.name}</span>
            </a>
          );
        })}
        <button
          onClick={copyToClipboard}
          className="inline-flex items-center justify-center space-x-2 px-4 py-2 rounded-lg bg-gray-600 hover:bg-gray-700 text-white transition-colors duration-200"
        >
          <Link2 size={20} />
          <span>Copy Link</span>
        </button>
      </div>
    </div>
  );
}
----------------------------------------

Directory:   ui

File:     alert.js

// File: components/ui/alert.js
import * as React from "react"

const Alert = React.forwardRef(({ className, variant = "default", ...props }, ref) => {
  const variantStyles = {
    default: "bg-background text-foreground",
    destructive: "bg-red-50 text-red-700 border-red-200"
  }

  return (
    <div
      ref={ref}
      role="alert"
      className={`relative w-full rounded-lg border p-4 ${variantStyles[variant]} ${className}`}
      {...props}
    />
  )
})
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={`mb-1 font-medium leading-none tracking-tight ${className}`}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={`text-sm [&_p]:leading-relaxed ${className}`}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }
----------------------------------------

File:     card.js

// File: components/ui/card.js
import * as React from "react"

const Card = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={`rounded-lg border bg-card text-card-foreground shadow-sm ${className}`}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={`flex flex-col space-y-1.5 p-6 ${className}`}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={`text-2xl font-semibold leading-none tracking-tight ${className}`}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={`text-sm text-muted-foreground ${className}`}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef(({ className, ...props }, ref) => (
  <div ref={ref} className={`p-6 pt-0 ${className}`} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={`flex items-center p-6 pt-0 ${className}`}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { 
  Card, 
  CardHeader, 
  CardTitle, 
  CardDescription, 
  CardContent, 
  CardFooter 
}
----------------------------------------

Directory: lib

File:   supabaseClient.js

import { createClient } from '@supabase/supabase-js'

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error('Missing Supabase environment variables')
}

export const supabase = createClient(supabaseUrl, supabaseAnonKey)
----------------------------------------

File: middleware.ts

import { createMiddlewareClient } from '@supabase/auth-helpers-nextjs'
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

export async function middleware(req: NextRequest) {
  const res = NextResponse.next()
  const supabase = createMiddlewareClient({ req, res })

  const {
    data: { session },
  } = await supabase.auth.getSession()

  // If trying to access admin page without auth
  if (req.nextUrl.pathname.startsWith('/admin')) {
    if (!session) {
      return NextResponse.redirect(new URL('/auth/signin', req.url))
    }

    // Check if user has admin role (we'll set this up later)
    const { data: profile } = await supabase
      .from('profiles')
      .select('role')
      .eq('id', session.user.id)
      .single()

    if (profile?.role !== 'admin') {
      return NextResponse.redirect(new URL('/', req.url))
    }
  }

  return res
}

export const config = {
  matcher: ['/admin/:path*']
}
----------------------------------------

File: next.config.js

// File: next.config.js

module.exports = {
  reactStrictMode: true,
}
----------------------------------------

File: next-env.d.ts

/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/basic-features/typescript for more information.

----------------------------------------

File: package.json

{
  "name": "data-forge",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@heroicons/react": "^2.1.5",
    "@supabase/auth-helpers-nextjs": "^0.8.7",
    "@supabase/auth-helpers-react": "^0.4.2",
    "@supabase/supabase-js": "^2.45.6",
    "@tiptap/extension-highlight": "^2.9.1",
    "@tiptap/extension-image": "^2.9.1",
    "@tiptap/extension-link": "^2.9.1",
    "@tiptap/extension-subscript": "^2.9.1",
    "@tiptap/extension-superscript": "^2.9.1",
    "@tiptap/extension-table": "^2.9.1",
    "@tiptap/extension-table-cell": "^2.9.1",
    "@tiptap/extension-table-header": "^2.9.1",
    "@tiptap/extension-table-row": "^2.9.1",
    "@tiptap/extension-task-item": "^2.9.1",
    "@tiptap/extension-task-list": "^2.9.1",
    "@tiptap/extension-text-align": "^2.9.1",
    "@tiptap/extension-underline": "^2.9.1",
    "@tiptap/react": "^2.9.1",
    "@tiptap/starter-kit": "^2.9.1",
    "date-fns": "^2.30.0",
    "framer-motion": "^6.5.1",
    "lucide-react": "^0.263.1",
    "next": "12.3.4",
    "prosemirror-commands": "^1.5.2",
    "prosemirror-example-setup": "^1.2.3",
    "prosemirror-model": "^1.19.3",
    "prosemirror-schema-basic": "^1.2.2",
    "prosemirror-schema-list": "^1.4.1",
    "prosemirror-state": "^1.4.3",
    "prosemirror-view": "^1.31.8",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "uuid": "^9.0.1"
  },
  "devDependencies": {
    "@tailwindcss/aspect-ratio": "^0.4.2",
    "@tailwindcss/forms": "^0.5.9",
    "@tailwindcss/line-clamp": "^0.4.4",
    "@tailwindcss/typography": "^0.5.15",
    "@types/node": "22.7.5",
    "@types/react": "18.3.11",
    "autoprefixer": "^10.4.14",
    "eslint": "8.38.0",
    "eslint-config-next": "13.3.0",
    "postcss": "^8.4.21",
    "tailwindcss": "^3.3.1",
    "typescript": "5.6.3"
  }
}

----------------------------------------

Directory: pages

Directory:   admin

Directory:     categories

File:       index.js

// File: pages/admin/categories/index.js
import { useState, useEffect } from 'react'
import { useSupabaseClient } from '@supabase/auth-helpers-react'
import AdminLayout from '../../../components/AdminLayout'
import { Alert, AlertDescription } from '../../../components/ui/alert'

export default function CategoriesManager() {
  const [categories, setCategories] = useState([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState(null)
  const [newCategory, setNewCategory] = useState({ name: '', slug: '', description: '' })
  const [editingCategory, setEditingCategory] = useState(null)
  const supabase = useSupabaseClient()

  useEffect(() => {
    fetchCategories()
  }, [])

  async function fetchCategories() {
    try {
      const { data, error } = await supabase
        .from('categories')
        .select('*')
        .order('name')

      if (error) throw error
      setCategories(data)
    } catch (error) {
      setError(error.message)
    } finally {
      setLoading(false)
    }
  }

  function handleInputChange(e, isEditing = false) {
    const { name, value } = e.target
    if (isEditing) {
      setEditingCategory(prev => ({ ...prev, [name]: value }))
    } else {
      setNewCategory(prev => ({ ...prev, [name]: value }))
      // Auto-generate slug from name
      if (name === 'name') {
        const slug = value.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '')
        setNewCategory(prev => ({ ...prev, slug }))
      }
    }
  }

  async function handleSubmit(e) {
    e.preventDefault()
    setError(null)
    try {
      const { data, error } = await supabase
        .from('categories')
        .insert([newCategory])

      if (error) throw error

      setCategories([...categories, data[0]])
      setNewCategory({ name: '', slug: '', description: '' })
    } catch (error) {
      setError(error.message)
    }
  }

  async function handleUpdate(e) {
    e.preventDefault()
    setError(null)
    try {
      const { error } = await supabase
        .from('categories')
        .update(editingCategory)
        .eq('id', editingCategory.id)

      if (error) throw error

      setCategories(categories.map(cat => 
        cat.id === editingCategory.id ? editingCategory : cat
      ))
      setEditingCategory(null)
    } catch (error) {
      setError(error.message)
    }
  }

  async function handleSubmit(e) {
    e.preventDefault()
    setError(null)
    try {
      const { data, error } = await supabase
        .from('categories')
        .insert([newCategory])
        .select() // Add this to return the inserted data

      if (error) throw error

      // Update to handle the returned data properly
      if (data && data.length > 0) {
        setCategories([...categories, data[0]])
        setNewCategory({ name: '', slug: '', description: '' })
      } else {
        throw new Error('No data returned from insert')
      }
    } catch (error) {
      setError(error.message)
    }
  }

  async function handleDelete(id) {
    if (!window.confirm('Are you sure you want to delete this category?')) return

    try {
      const { error } = await supabase
        .from('categories')
        .delete()
        .eq('id', id)

      if (error) throw error

      setCategories(categories.filter(cat => cat.id !== id))
    } catch (error) {
      setError(error.message)
    }
  }

  return (
    <AdminLayout>
      <div className="bg-white shadow rounded-lg p-6">
        <h1 className="text-2xl font-semibold text-gray-900 mb-6">Categories</h1>

        {error && (
          <Alert variant="destructive" className="mb-4">
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}

        {/* Add New Category Form */}
        <form onSubmit={handleSubmit} className="mb-8 p-4 border rounded-lg">
          <h2 className="text-lg font-medium mb-4">Add New Category</h2>
          <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
            <div>
              <label className="block text-sm font-medium text-gray-700">Name</label>
              <input
                type="text"
                name="name"
                value={newCategory.name}
                onChange={handleInputChange}
                required
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-emerald-pool focus:ring focus:ring-emerald-pool focus:ring-opacity-50"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700">Slug</label>
              <input
                type="text"
                name="slug"
                value={newCategory.slug}
                onChange={handleInputChange}
                required
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-emerald-pool focus:ring focus:ring-emerald-pool focus:ring-opacity-50"
              />
            </div>
            <div className="md:col-span-2">
              <label className="block text-sm font-medium text-gray-700">Description</label>
              <textarea
                name="description"
                value={newCategory.description}
                onChange={handleInputChange}
                rows="3"
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-emerald-pool focus:ring focus:ring-emerald-pool focus:ring-opacity-50"
              />
            </div>
          </div>
          <button
            type="submit"
            className="mt-4 px-4 py-2 bg-emerald-pool text-white rounded-md hover:bg-opacity-90"
          >
            Add Category
          </button>
        </form>

        {/* Categories List */}
        {loading ? (
          <div className="text-center text-gray-500">Loading categories...</div>
        ) : categories.length === 0 ? (
          <div className="text-center text-gray-500">No categories yet.</div>
        ) : (
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Slug</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Description</th>
                  <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {categories.map(category => (
                  <tr key={category.id}>
                    {editingCategory?.id === category.id ? (
                      <td colSpan="4">
                        <form onSubmit={handleUpdate} className="p-4">
                          <div className="grid grid-cols-1 gap-4 md:grid-cols-3">
                            <input
                              type="text"
                              name="name"
                              value={editingCategory.name}
                              onChange={e => handleInputChange(e, true)}
                              className="rounded-md border-gray-300 shadow-sm focus:border-emerald-pool focus:ring focus:ring-emerald-pool focus:ring-opacity-50"
                            />
                            <input
                              type="text"
                              name="slug"
                              value={editingCategory.slug}
                              onChange={e => handleInputChange(e, true)}
                              className="rounded-md border-gray-300 shadow-sm focus:border-emerald-pool focus:ring focus:ring-emerald-pool focus:ring-opacity-50"
                            />
                            <input
                              type="text"
                              name="description"
                              value={editingCategory.description}
                              onChange={e => handleInputChange(e, true)}
                              className="rounded-md border-gray-300 shadow-sm focus:border-emerald-pool focus:ring focus:ring-emerald-pool focus:ring-opacity-50"
                            />
                          </div>
                          <div className="mt-2 flex justify-end space-x-2">
                            <button
                              type="button"
                              onClick={() => setEditingCategory(null)}
                              className="px-3 py-1 text-gray-600 hover:text-gray-800"
                            >
                              Cancel
                            </button>
                            <button
                              type="submit"
                              className="px-3 py-1 bg-emerald-pool text-white rounded-md hover:bg-opacity-90"
                            >
                              Save
                            </button>
                          </div>
                        </form>
                      </td>
                    ) : (
                      <>
                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                          {category.name}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          {category.slug}
                        </td>
                        <td className="px-6 py-4 text-sm text-gray-500">
                          {category.description}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                          <button
                            onClick={() => setEditingCategory(category)}
                            className="text-emerald-pool hover:text-emerald-pool/80 mr-3"
                          >
                            Edit
                          </button>
                          <button
                            onClick={() => handleDelete(category.id)}
                            className="text-red-600 hover:text-red-900"
                          >
                            Delete
                          </button>
                        </td>
                      </>
                    )}
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>
    </AdminLayout>
  )
}
----------------------------------------

File:     index.js

// File: pages/admin/index.js
import { useEffect, useState } from 'react'
import { useSupabaseClient, useSession } from '@supabase/auth-helpers-react'
import AdminLayout from '../../components/AdminLayout'
import { Card, CardContent, CardHeader, CardTitle } from '../../components/ui/card'
import { useRouter } from 'next/router'

export default function AdminDashboard() {
  const session = useSession()
  const router = useRouter()
  const supabase = useSupabaseClient()
  const [stats, setStats] = useState({
    totalPosts: 0,
    publishedPosts: 0,
    draftPosts: 0,
    categories: 0
  })

  useEffect(() => {
    if (!session) {
      router.push('/auth/signin')
    } else {
      fetchStats()
    }
  }, [session])

  async function fetchStats() {
    try {
      // Get total posts
      const { count: totalPosts } = await supabase
        .from('posts')
        .select('*', { count: 'exact', head: true })

      // Get published posts
      const { count: publishedPosts } = await supabase
        .from('posts')
        .select('*', { count: 'exact', head: true })
        .eq('status', 'published')

      // Get draft posts
      const { count: draftPosts } = await supabase
        .from('posts')
        .select('*', { count: 'exact', head: true })
        .eq('status', 'draft')

      // Get categories
      const { count: categories } = await supabase
        .from('categories')
        .select('*', { count: 'exact', head: true })

      setStats({
        totalPosts: totalPosts || 0,
        publishedPosts: publishedPosts || 0,
        draftPosts: draftPosts || 0,
        categories: categories || 0
      })
    } catch (error) {
      console.error('Error fetching stats:', error)
    }
  }

  if (!session) return null

  return (
    <AdminLayout>
      <div className="space-y-6">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Dashboard</h1>
          <p className="mt-2 text-gray-600">Welcome back to your CMS dashboard.</p>
        </div>

        {/* Stats Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">Total Posts</CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-3xl font-bold text-emerald-pool">{stats.totalPosts}</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle className="text-lg">Published Posts</CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-3xl font-bold text-green-600">{stats.publishedPosts}</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle className="text-lg">Draft Posts</CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-3xl font-bold text-yellow-600">{stats.draftPosts}</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle className="text-lg">Categories</CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-3xl font-bold text-blue-600">{stats.categories}</p>
            </CardContent>
          </Card>
        </div>

        {/* Quick Actions */}
        <Card>
          <CardHeader>
            <CardTitle>Quick Actions</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              <button
                onClick={() => router.push('/admin/posts/new')}
                className="p-4 text-left bg-emerald-pool/10 rounded-lg hover:bg-emerald-pool/20 transition-colors"
              >
                <h3 className="font-semibold text-emerald-pool">Create New Post</h3>
                <p className="text-sm text-gray-600 mt-1">Start writing a new blog post</p>
              </button>

              <button
                onClick={() => router.push('/admin/categories')}
                className="p-4 text-left bg-emerald-pool/10 rounded-lg hover:bg-emerald-pool/20 transition-colors"
              >
                <h3 className="font-semibold text-emerald-pool">Manage Categories</h3>
                <p className="text-sm text-gray-600 mt-1">Organize your content</p>
              </button>

              <button
                onClick={() => router.push('/admin/posts')}
                className="p-4 text-left bg-emerald-pool/10 rounded-lg hover:bg-emerald-pool/20 transition-colors"
              >
                <h3 className="font-semibold text-emerald-pool">View All Posts</h3>
                <p className="text-sm text-gray-600 mt-1">Manage your existing content</p>
              </button>
            </div>
          </CardContent>
        </Card>
      </div>
    </AdminLayout>
  )
}
----------------------------------------

Directory:     posts

File:       [id].js

import { useRouter } from 'next/router'
import AdminLayout from '../../../components/AdminLayout'
import PostEditor from '../../../components/PostEditor'

export default function EditPost() {
  const router = useRouter()
  const { id } = router.query

  return (
    <AdminLayout>
      <div className="bg-white shadow rounded-lg p-6">
        <h1 className="text-2xl font-semibold text-gray-900 mb-6">Edit Post</h1>
        {id && <PostEditor postId={id} />}
      </div>
    </AdminLayout>
  )
}
----------------------------------------

File:       index.js

// File: pages/admin/posts/index.js
import { useState, useEffect } from 'react'
import { useSupabaseClient } from '@supabase/auth-helpers-react'
import AdminLayout from '../../../components/AdminLayout'
import Link from 'next/link'
import { format } from 'date-fns'
import { Alert, AlertDescription } from '../../../components/ui/alert'
import { Card, CardContent } from '../../../components/ui/card'

export default function PostsList() {
  const [posts, setPosts] = useState([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState(null)
  const [filter, setFilter] = useState({
    status: 'all',
    category: 'all',
    search: ''
  })
  const [categories, setCategories] = useState([])
  const supabase = useSupabaseClient()

  useEffect(() => {
    Promise.all([fetchPosts(), fetchCategories()])
  }, [])

  useEffect(() => {
    fetchPosts()
  }, [filter])

  async function fetchCategories() {
    try {
      const { data, error } = await supabase
        .from('categories')
        .select('*')
        .order('name')

      if (error) throw error
      setCategories(data || [])
    } catch (error) {
      console.error('Error fetching categories:', error)
    }
  }

  async function fetchPosts() {
    try {
      let query = supabase
        .from('posts')
        .select(`
          *,
          profiles:author_id(full_name),
          posts_categories!inner(
            categories(
              id,
              name
            )
          )
        `)
        .order('created_at', { ascending: false })

      if (filter.status !== 'all') {
        query = query.eq('status', filter.status)
      }

      if (filter.search) {
        query = query.or(`title.ilike.%${filter.search}%,content.ilike.%${filter.search}%`)
      }

      const { data, error } = await query

      if (error) throw error

      // Transform the data to include categories
      const transformedPosts = data.map(post => ({
        ...post,
        categories: post.posts_categories.map(pc => pc.categories)
      }))

      // Filter by category if selected
      const filteredPosts = filter.category === 'all'
        ? transformedPosts
        : transformedPosts.filter(post =>
            post.categories.some(cat => cat.id === filter.category)
          )

      setPosts(filteredPosts)
    } catch (error) {
      setError(error.message)
    } finally {
      setLoading(false)
    }
  }

  async function handleDelete(id) {
    if (!window.confirm('Are you sure you want to delete this post?')) return

    try {
      const { error } = await supabase
        .from('posts')
        .delete()
        .eq('id', id)

      if (error) throw error

      setPosts(posts.filter(post => post.id !== id))
    } catch (error) {
      setError(error.message)
    }
  }

  function handleFilterChange(e) {
    const { name, value } = e.target
    setFilter(prev => ({ ...prev, [name]: value }))
  }

  return (
    <AdminLayout>
      <Card>
        <CardContent className="p-6">
          <div className="sm:flex sm:items-center sm:justify-between mb-6">
            <h1 className="text-2xl font-semibold text-gray-900">Posts</h1>
            <Link href="/admin/posts/new">
              <button className="mt-3 sm:mt-0 inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-emerald-pool hover:bg-opacity-90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-emerald-pool">
                New Post
              </button>
            </Link>
          </div>

          {error && (
            <Alert variant="destructive" className="mb-4">
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}

          {/* Filters */}
          <div className="mb-6 grid grid-cols-1 md:grid-cols-4 gap-4">
            <div>
              <label htmlFor="search" className="block text-sm font-medium text-gray-700">
                Search
              </label>
              <input
                type="text"
                id="search"
                name="search"
                value={filter.search}
                onChange={handleFilterChange}
                placeholder="Search posts..."
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-emerald-pool focus:ring focus:ring-emerald-pool focus:ring-opacity-50"
              />
            </div>

            <div>
              <label htmlFor="status" className="block text-sm font-medium text-gray-700">
                Status
              </label>
              <select
                id="status"
                name="status"
                value={filter.status}
                onChange={handleFilterChange}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-emerald-pool focus:ring focus:ring-emerald-pool focus:ring-opacity-50"
              >
                <option value="all">All Status</option>
                <option value="draft">Draft</option>
                <option value="published">Published</option>
                <option value="archived">Archived</option>
              </select>
            </div>

            <div>
              <label htmlFor="category" className="block text-sm font-medium text-gray-700">
                Category
              </label>
              <select
                id="category"
                name="category"
                value={filter.category}
                onChange={handleFilterChange}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-emerald-pool focus:ring focus:ring-emerald-pool focus:ring-opacity-50"
              >
                <option value="all">All Categories</option>
                {categories.map(category => (
                  <option key={category.id} value={category.id}>
                    {category.name}
                  </option>
                ))}
              </select>
            </div>
          </div>

          {/* Posts Table */}
          {loading ? (
            <div className="text-center text-gray-500 py-8">Loading posts...</div>
          ) : posts.length === 0 ? (
            <div className="text-center text-gray-500 py-8">No posts found.</div>
          ) : (
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Title
                    </th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Author
                    </th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Categories
                    </th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Status
                    </th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Created
                    </th>
                    <th scope="col" className="relative px-6 py-3">
                      <span className="sr-only">Actions</span>
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {posts.map((post) => (
                    <tr key={post.id}>
                      <td className="px-6 py-4">
                        <div className="text-sm font-medium text-gray-900">{post.title}</div>
                        <div className="text-sm text-gray-500">{post.slug}</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {post.profiles?.full_name}
                      </td>
                      <td className="px-6 py-4">
                        <div className="flex flex-wrap gap-1">
                          {post.categories.map(category => (
                            <span
                              key={category.id}
                              className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-emerald-pool/10 text-emerald-pool"
                            >
                              {category.name}
                            </span>
                          ))}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full 
                          ${post.status === 'published' ? 'bg-green-100 text-green-800' : 
                            post.status === 'draft' ? 'bg-yellow-100 text-yellow-800' : 
                            'bg-gray-100 text-gray-800'}`}>
                          {post.status}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {format(new Date(post.created_at), 'MMM d, yyyy')}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <Link href={`/admin/posts/${post.id}`}>
                          <span className="text-emerald-pool hover:text-emerald-pool/80 cursor-pointer mr-4">
                            Edit
                          </span>
                        </Link>
                        <button
                          onClick={() => handleDelete(post.id)}
                          className="text-red-600 hover:text-red-900"
                        >
                          Delete
                        </button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </CardContent>
      </Card>
    </AdminLayout>
  )
}
----------------------------------------

File:       new.js

// File: pages/admin/posts/new.js
import AdminLayout from '../../../components/AdminLayout'
import PostEditor from '../../../components/PostEditor'

export default function NewPost() {
  return (
    <AdminLayout>
      <div className="bg-white shadow rounded-lg p-6">
        <h1 className="text-2xl font-semibold text-gray-900 mb-6">Create New Post</h1>
        <PostEditor />
      </div>
    </AdminLayout>
  )
}
----------------------------------------

Directory:   api

File:     hello.ts

// Next.js API route support: https://nextjs.org/docs/api-routes/introduction
import type { NextApiRequest, NextApiResponse } from 'next'

type Data = {
  name: string
}

export default function handler(
  req: NextApiRequest,
  res: NextApiResponse<Data>
) {
  res.status(200).json({ name: 'John Doe' })
}

----------------------------------------

File:   _app.js

// File: pages/_app.js
import { createPagesBrowserClient } from '@supabase/auth-helpers-nextjs'
import { SessionContextProvider } from '@supabase/auth-helpers-react'
import { useState } from 'react'
import '../styles/globals.css'

// For older versions of Next.js without built-in font support
// Add this to your _document.js instead:
// <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet" />

function MyApp({ Component, pageProps }) {
  const [supabaseClient] = useState(() => createPagesBrowserClient())

  return (
    <SessionContextProvider
      supabaseClient={supabaseClient}
      initialSession={pageProps.initialSession}
    >
      <div className="font-sans">
        <Component {...pageProps} />
      </div>
    </SessionContextProvider>
  )
}

export default MyApp
----------------------------------------

Directory:   auth

File:     signin.js

// File: pages/auth/signin.js
import { useState } from 'react'
import { useRouter } from 'next/router'
import { useSupabaseClient } from '@supabase/auth-helpers-react'
import { Alert, AlertDescription } from '../../components/ui/alert'
import Link from 'next/link'

export default function SignIn() {
  const router = useRouter()
  const supabase = useSupabaseClient()
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [error, setError] = useState(null)
  const [loading, setLoading] = useState(false)

  const handleSignIn = async (e) => {
    e.preventDefault()
    setLoading(true)
    setError(null)

    try {
      const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password,
      })

      if (error) throw error

      // Check if user is admin
      const { data: profile, error: profileError } = await supabase
        .from('profiles')
        .select('role')
        .eq('id', data.user.id)
        .single()

      if (profileError) throw profileError

      if (profile.role !== 'admin') {
        throw new Error('Access denied. Admin privileges required.')
      }

      router.push('/admin')
    } catch (error) {
      setError(error.message)
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="min-h-screen bg-gray-100 flex flex-col justify-center py-12 sm:px-6 lg:px-8">
      <div className="sm:mx-auto sm:w-full sm:max-w-md">
        <h2 className="mt-6 text-center text-3xl font-bold tracking-tight text-gray-900">
          Sign in to Data Forge CMS
        </h2>
        <p className="mt-2 text-center text-sm text-gray-600">
          Admin access only
        </p>
      </div>

      <div className="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
        <div className="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
          <form className="space-y-6" onSubmit={handleSignIn}>
            {error && (
              <Alert variant="destructive">
                <AlertDescription>{error}</AlertDescription>
              </Alert>
            )}

            <div>
              <label 
                htmlFor="email" 
                className="block text-sm font-medium text-gray-700"
              >
                Email address
              </label>
              <div className="mt-1">
                <input
                  id="email"
                  name="email"
                  type="email"
                  autoComplete="email"
                  required
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  className="block w-full appearance-none rounded-md border border-gray-300 px-3 py-2 placeholder-gray-400 shadow-sm focus:border-emerald-pool focus:outline-none focus:ring-emerald-pool sm:text-sm"
                />
              </div>
            </div>

            <div>
              <label 
                htmlFor="password" 
                className="block text-sm font-medium text-gray-700"
              >
                Password
              </label>
              <div className="mt-1">
                <input
                  id="password"
                  name="password"
                  type="password"
                  autoComplete="current-password"
                  required
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="block w-full appearance-none rounded-md border border-gray-300 px-3 py-2 placeholder-gray-400 shadow-sm focus:border-emerald-pool focus:outline-none focus:ring-emerald-pool sm:text-sm"
                />
              </div>
            </div>

            <div className="flex items-center justify-between">
              <div className="flex items-center">
                <input
                  id="remember-me"
                  name="remember-me"
                  type="checkbox"
                  className="h-4 w-4 rounded border-gray-300 text-emerald-pool focus:ring-emerald-pool"
                />
                <label 
                  htmlFor="remember-me" 
                  className="ml-2 block text-sm text-gray-900"
                >
                  Remember me
                </label>
              </div>

              <div className="text-sm">
                <Link
                  href="/auth/forgot-password"
                  className="font-medium text-emerald-pool hover:text-emerald-pool/80"
                >
                  Forgot your password?
                </Link>
              </div>
            </div>

            <div>
              <button
                type="submit"
                disabled={loading}
                className="flex w-full justify-center rounded-md border border-transparent bg-emerald-pool py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-opacity-90 focus:outline-none focus:ring-2 focus:ring-emerald-pool focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {loading ? 'Signing in...' : 'Sign in'}
              </button>
            </div>
          </form>

          <div className="mt-6">
            <div className="relative">
              <div className="absolute inset-0 flex items-center">
                <div className="w-full border-t border-gray-300" />
              </div>
              <div className="relative flex justify-center text-sm">
                <span className="bg-white px-2 text-gray-500">
                  Need an account?
                </span>
              </div>
            </div>

            <div className="mt-6 text-center">
              <Link
                href="/auth/signup"
                className="font-medium text-emerald-pool hover:text-emerald-pool/80"
              >
                Request admin access
              </Link>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}
----------------------------------------

Directory:   blog

File:     index.js

// File: pages/blog/index.js
import { useEffect, useState } from 'react';
import { createClient } from '@supabase/supabase-js';
import Link from 'next/link';
import { format } from 'date-fns';
import { motion } from 'framer-motion';
import Header from '../../components/Header';
import Footer from '../../components/Footer';
import { 
  Clock, 
  Search, 
  Filter,
  ChevronRight,
  User,
  Calendar,
  Loader,
  BookOpen
} from 'lucide-react';

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
);

// Utility function for reading time
function calculateReadingTime(content) {
  if (!content) return 1;
  const wordsPerMinute = 200;
  const wordCount = content.trim().split(/\s+/).length;
  return Math.ceil(wordCount / wordsPerMinute);
}

export default function BlogIndex() {
  const [posts, setPosts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [filteredPosts, setFilteredPosts] = useState([]);
  const [currentPage, setCurrentPage] = useState(1);
  const [isSearching, setIsSearching] = useState(false);

  const postsPerPage = 9;

  useEffect(() => {
    fetchPosts();
  }, []);

  // Search functionality
  useEffect(() => {
    if (searchQuery) {
      setIsSearching(true);
      const searchResults = posts.filter(post => 
        post.title?.toLowerCase().includes(searchQuery.toLowerCase()) ||
        post.excerpt?.toLowerCase().includes(searchQuery.toLowerCase()) ||
        post.posts_categories?.some(({ categories }) => 
          categories.name.toLowerCase().includes(searchQuery.toLowerCase())
        )
      );
      setFilteredPosts(searchResults);
      setCurrentPage(1);
      setIsSearching(false);
    } else {
      setFilteredPosts(posts);
    }
  }, [searchQuery, posts]);

  async function fetchPosts() {
    try {
      setLoading(true);
      setError(null);

      const { data: postsData, error: postsError } = await supabase
        .from('posts')
        .select(`
          *,
          profiles:author_id(full_name),
          posts_categories(
            categories(name, slug)
          )
        `)
        .eq('status', 'published')
        .order('published_at', { ascending: false });

      if (postsError) throw postsError;

      // Process and set posts
      setPosts(postsData || []);
      setFilteredPosts(postsData || []);
    } catch (err) {
      console.error('Error fetching posts:', err);
      setError('Failed to load blog posts. Please try again later.');
    } finally {
      setLoading(false);
    }
  }

  // Calculate current posts for pagination
  const indexOfLastPost = currentPage * postsPerPage;
  const indexOfFirstPost = indexOfLastPost - postsPerPage;
  const currentPosts = filteredPosts.slice(indexOfFirstPost, indexOfLastPost);
  const totalPages = Math.ceil(filteredPosts.length / postsPerPage);

  // Featured post logic
  const featuredPost = posts.find(post => post.is_featured) || posts[0];

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50">
        <Header />
        <div className="max-w-7xl mx-auto px-4 py-20 text-center">
          <h2 className="text-2xl font-bold text-gray-900 mb-4">
            Something went wrong
          </h2>
          <p className="text-gray-600 mb-8">{error}</p>
          <button 
            onClick={fetchPosts}
            className="px-6 py-3 bg-emerald-pool text-white rounded-lg hover:bg-emerald-pool/90 transition-colors"
          >
            Try Again
          </button>
        </div>
        <Footer />
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <Header />

      {/* Hero Section */}
      <section className="py-24 bg-white border-b border-gray-100">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="max-w-2xl mx-auto text-center mb-12">
            <h1 className="text-4xl md:text-5xl font-bold text-gray-900 mb-4">
              Blog & Resources
            </h1>
            <p className="text-lg text-gray-600">
              Expert insights on B2B prospecting, sales strategies, and data enrichment
            </p>
          </div>

          {/* Search Bar */}
          <div className="max-w-2xl mx-auto">
            <div className="flex gap-4">
              <div className="flex-1 relative">
                <input 
                  type="text"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  placeholder="Search articles..."
                  className="w-full px-4 py-3 pl-10 rounded-lg border border-gray-200 focus:ring-2 focus:ring-emerald-pool/20 focus:border-emerald-pool transition-colors"
                />
                {isSearching ? (
                  <Loader className="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-gray-400 animate-spin" />
                ) : (
                  <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-gray-400" />
                )}
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Blog Posts Grid */}
      <section className="py-16">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          {loading ? (
            <div className="text-center py-12">
              <Loader className="w-8 h-8 animate-spin text-emerald-pool mx-auto" />
              <p className="mt-4 text-gray-600">Loading posts...</p>
            </div>
          ) : (
            <>
              {filteredPosts.length === 0 ? (
                <div className="text-center py-12">
                  <h3 className="text-xl font-semibold text-gray-900 mb-2">
                    No posts found
                  </h3>
                  <p className="text-gray-600">
                    Try adjusting your search terms
                  </p>
                </div>
              ) : (
                <div className="grid gap-8 md:grid-cols-2 lg:grid-cols-3">
                  {currentPosts.map((post, index) => (
                    <motion.article
                      key={post.id}
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ delay: index * 0.1 }}
                      className="group relative bg-white rounded-xl overflow-hidden transition-all duration-300 hover:shadow-lg"
                    >
                      <Link href={`/blog/${post.slug}`}>
                        <a className="block">
                          {/* Image Container */}
                          <div className="relative aspect-video">
                            <img 
                              src={post.featured_image}
                              alt={post.title}
                              className="w-full h-full object-cover transition-transform duration-500 group-hover:scale-105"
                            />
                            {/* Hover Overlay */}
                            <div className="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                              <div className="absolute bottom-4 left-4 right-4 text-white">
                                <div className="flex items-center justify-between">
                                  <span className="flex items-center text-sm">
                                    <Clock className="w-4 h-4 mr-1" />
                                    {calculateReadingTime(post.content)} min read
                                  </span>
                                  <span className="flex items-center text-sm font-medium">
                                    Read More 
                                    <ChevronRight className="w-4 h-4 ml-1 group-hover:translate-x-1 transition-transform" />
                                  </span>
                                </div>
                              </div>
                            </div>
                          </div>

                          {/* Content */}
                          <div className="p-6">
                            {/* Categories */}
                            <div className="flex flex-wrap gap-2 mb-4">
                              {post.posts_categories?.map(({ categories }) => (
                                <span
                                  key={categories.slug}
                                  className="inline-flex items-center px-3 py-0.5 rounded-full text-sm font-medium bg-emerald-pool/10 text-emerald-pool"
                                >
                                  {categories.name}
                                </span>
                              ))}
                            </div>

                            {/* Title */}
                            <h2 className="text-xl font-bold text-gray-900 mb-3 group-hover:text-emerald-pool transition-colors">
                              {post.title}
                            </h2>

                            {/* Excerpt */}
                            {post.excerpt && (
                              <p className="text-gray-600 line-clamp-2 mb-4">
                                {post.excerpt}
                              </p>
                            )}

                            {/* Meta */}
                            <div className="flex items-center justify-between mt-6 pt-6 border-t border-gray-100">
                              <div className="flex items-center">
                                <div className="w-8 h-8 rounded-full bg-emerald-pool/10 flex items-center justify-center">
                                  <User className="w-4 h-4 text-emerald-pool" />
                                </div>
                                <span className="ml-2 text-sm text-gray-600">
                                  {post.profiles?.full_name}
                                </span>
                              </div>
                              <div className="flex items-center text-sm text-gray-500">
                                <Calendar className="w-4 h-4 mr-1" />
                                {format(new Date(post.published_at || post.created_at), 'MMM d, yyyy')}
                              </div>
                            </div>
                          </div>
                        </a>
                      </Link>
                    </motion.article>
                  ))}
                </div>
              )}

              {/* Pagination */}
              {totalPages > 1 && (
                <div className="mt-12 flex justify-center items-center gap-2">
                  <button
                    onClick={() => setCurrentPage(p => Math.max(1, p - 1))}
                    disabled={currentPage === 1}
                    className="px-4 py-2 rounded-lg bg-white text-gray-600 hover:bg-gray-100 disabled:opacity-50 disabled:hover:bg-white transition-colors"
                  >
                    Previous
                  </button>

                  {Array.from({ length: totalPages }, (_, i) => i + 1).map((pageNumber) => (
                    <button
                      key={pageNumber}
                      onClick={() => setCurrentPage(pageNumber)}
                      className={`px-4 py-2 rounded-lg transition-colors ${
                        currentPage === pageNumber
                          ? 'bg-emerald-pool text-white'
                          : 'bg-white text-gray-600 hover:bg-gray-100'
                      }`}
                    >
                      {pageNumber}
                    </button>
                  ))}

                  <button
                    onClick={() => setCurrentPage(p => Math.min(totalPages, p + 1))}
                    disabled={currentPage === totalPages}
                    className="px-4 py-2 rounded-lg bg-white text-gray-600 hover:bg-gray-100 disabled:opacity-50 disabled:hover:bg-white transition-colors"
                  >
                    Next
                  </button>
                </div>
              )}
            </>
          )}
        </div>
      </section>

      <Footer />
    </div>
  );
}
----------------------------------------

File:     [slug].js

// pages/blog/[slug].js
import { createClient } from '@supabase/supabase-js'
import { format, parseISO } from 'date-fns'
import Link from 'next/link'
import Head from 'next/head'
import { useRouter } from 'next/router'
import MainLayout from '../../components/MainLayout'
import TableOfContents from '../../components/PostEditor/TableOfContents'
import SocialShare from '../../components/SocialShare'

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
)

// Clean URL function
const cleanUrl = (url) => {
  if (!url) return ''
  return url.replace(/([^:]\/)\/+/g, '$1')
}

export async function getStaticPaths() {
  const { data: posts } = await supabase
    .from('posts')
    .select('slug')
    .eq('status', 'published')

  return {
    paths: posts?.map(({ slug }) => ({
      params: { slug }
    })) || [],
    fallback: 'blocking'
  }
}

export async function getStaticProps({ params }) {
  try {
    // Fetch main post with categories included
    const { data: post, error } = await supabase
      .from('posts')
      .select(`
        *,
        profiles:author_id(*),
        posts_categories!inner(
          category_id,
          categories(*)
        )
      `)
      .eq('slug', params.slug)
      .eq('status', 'published')
      .single()

    if (error || !post) {
      return { notFound: true }
    }

    // Get category IDs from the current post
    const categoryIds = post.posts_categories.map(pc => pc.category_id)

    // Fetch related posts that share categories with the current post
    const { data: relatedPosts } = await supabase
      .from('posts')
      .select(`
        id,
        title,
        slug,
        published_at,
        created_at,
        excerpt,
        featured_image,
        posts_categories!inner(
          category_id,
          categories(*)
        )
      `)
      .eq('status', 'published')
      .neq('id', post.id)
      .in('posts_categories.category_id', categoryIds)
      .limit(3)

    // Format the post data
    const formattedPost = {
      ...post,
      author_name: post.profiles?.full_name || 'Anonymous',
      author_avatar: post.profiles?.avatar_url || '/default-avatar.png',
      formatted_date: post.published_at || post.created_at 
        ? format(parseISO(post.published_at || post.created_at), 'MMMM d, yyyy')
        : '',
    }

    // Format related posts
    const formattedRelatedPosts = (relatedPosts || []).map(post => ({
      ...post,
      formatted_date: post.published_at || post.created_at 
        ? format(parseISO(post.published_at || post.created_at), 'MMM d, yyyy')
        : ''
    }))

    // Clean up the canonical URL
    const baseUrl = process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000'
    const canonicalUrl = cleanUrl(`${baseUrl}/blog/${params.slug}`)

    return {
      props: {
        post: formattedPost,
        relatedPosts: formattedRelatedPosts,
        canonicalUrl,
        siteTitle: process.env.NEXT_PUBLIC_SITE_NAME || 'Your Site Name'
      },
      revalidate: 60 * 60,
    }
  } catch (error) {
    console.error('Error fetching post:', error)
    return { notFound: true }
  }
}

export default function BlogPost({ post, relatedPosts, canonicalUrl, siteTitle }) {
  const router = useRouter()

  if (router.isFallback) {
    return (
      <MainLayout>
        <div className="flex items-center justify-center min-h-screen">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-emerald-pool"></div>
        </div>
      </MainLayout>
    )
  }

  // Prepare schema data with fallbacks for null values
  const schemaData = {
    "@context": "https://schema.org",
    "@type": "BlogPosting",
    "headline": post.title || "",
    "image": post.featured_image ? [post.featured_image] : [],
    "datePublished": post.published_at || post.created_at || new Date().toISOString(),
    "dateModified": post.updated_at || post.published_at || post.created_at || new Date().toISOString(),
    "author": {
      "@type": "Person",
      "name": post.author_name
    },
    "publisher": {
      "@type": "Organization",
      "name": siteTitle,
      "logo": {
        "@type": "ImageObject",
        "url": cleanUrl(`${process.env.NEXT_PUBLIC_SITE_URL}/logo.png`)
      }
    },
    "mainEntityOfPage": {
      "@type": "WebPage",
      "@id": canonicalUrl
    }
  }

  return (
    <MainLayout>
      <Head>
        <title>{`${post.title} | ${siteTitle}`}</title>
        <meta name="description" content={post.excerpt || ''} />
        <meta property="og:title" content={post.title} />
        <meta property="og:description" content={post.excerpt || ''} />
        <meta property="og:url" content={canonicalUrl} />
        <link rel="canonical" href={canonicalUrl} />
        {post.featured_image && (
          <meta property="og:image" content={post.featured_image} />
        )}
        <script
          type="application/ld+json"
          dangerouslySetInnerHTML={{
            __html: JSON.stringify(schemaData)
          }}
        />
      </Head>

      <article className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        <div className="lg:grid lg:grid-cols-12 lg:gap-8">
          {/* Main content */}
          <div className="lg:col-span-8">
            {post.featured_image && (
              <img 
                src={post.featured_image} 
                alt={post.title}
                className="w-full h-64 md:h-96 object-cover rounded-lg mb-8"
              />
            )}

            <header className="mb-8">
              <div className="flex flex-wrap gap-2 mb-4">
                {post.posts_categories.map(({ categories }) => (
                  <Link 
                    key={categories.id} 
                    href={`/blog/category/${categories.slug}`}
                  >
                    <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-emerald-pool/10 text-emerald-pool cursor-pointer hover:bg-emerald-pool/20 transition-colors">
                      {categories.name}
                    </span>
                  </Link>
                ))}
              </div>

              <h1 className="text-4xl font-bold text-gray-900 mb-4">{post.title}</h1>

              <div className="flex items-center space-x-4">
                <img
                  src={post.author_avatar}
                  alt={post.author_name}
                  className="w-12 h-12 rounded-full"
                />
                <div>
                  <p className="text-sm font-medium text-gray-900">
                    {post.author_name}
                  </p>
                  <p className="text-sm text-gray-500">
                    {post.formatted_date}
                    {post.estimated_read_time && ` · ${post.estimated_read_time} min read`}
                  </p>
                </div>
              </div>
            </header>

            {/* Share buttons at the top */}
            <div className="mb-8">
              <SocialShare 
                url={canonicalUrl}
                title={post.title}
                description={post.excerpt || ''}
              />
            </div>

            <div 
              className="prose prose-lg max-w-none"
              dangerouslySetInnerHTML={{ __html: post.content }}
            />

            {/* Share buttons at the bottom */}
            <div className="mt-12 pt-8 border-t">
              <SocialShare 
                url={canonicalUrl}
                title={post.title}
                description={post.excerpt || ''}
              />
            </div>

            {/* Related Posts with thumbnails */}
            {relatedPosts.length > 0 && (
              <div className="mt-12 pt-8 border-t">
                <h2 className="text-2xl font-bold text-gray-900 mb-6">Related Articles</h2>
                <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {relatedPosts.map(post => (
                    <Link key={post.id} href={`/blog/${post.slug}`}>
                      <a className="group">
                        <div className="bg-white rounded-lg shadow-sm overflow-hidden hover:shadow-md transition-shadow duration-200">
                          {post.featured_image ? (
                            <div className="aspect-w-16 aspect-h-9">
                              <img
                                src={post.featured_image}
                                alt={post.title}
                                className="w-full h-48 object-cover"
                              />
                            </div>
                          ) : (
                            <div className="w-full h-48 bg-gray-100 flex items-center justify-center">
                              <span className="text-gray-400">No image</span>
                            </div>
                          )}
                          <div className="p-6">
                            <h3 className="text-lg font-semibold text-gray-900 group-hover:text-emerald-pool transition-colors mb-2 line-clamp-2">
                              {post.title}
                            </h3>
                            {post.excerpt && (
                              <p className="text-gray-600 text-sm mb-2 line-clamp-2">
                                {post.excerpt}
                              </p>
                            )}
                            <p className="text-sm text-gray-500">
                              {post.formatted_date}
                            </p>
                          </div>
                        </div>
                      </a>
                    </Link>
                  ))}
                </div>
              </div>
            )}
          </div>

          {/* Sidebar */}
          <aside className="hidden lg:block lg:col-span-4">
            <div className="sticky top-8 space-y-8">
              {/* Table of Contents */}
              <TableOfContents content={post.content} />

              {/* Author Bio */}
              {post.profiles?.bio && (
                <div className="bg-white shadow-sm rounded-lg p-6 mt-8">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">About the Author</h3>
                  <div className="flex items-start space-x-4">
                    <img
                      src={post.author_avatar}
                      alt={post.author_name}
                      className="w-16 h-16 rounded-full"
                    />
                    <div>
                      <h4 className="font-medium text-gray-900">{post.author_name}</h4>
                      {post.profiles.title && (
                        <p className="text-sm text-gray-500 mb-2">{post.profiles.title}</p>
                      )}
                      <p className="text-gray-600 text-sm">{post.profiles.bio}</p>
                    </div>
                  </div>
                </div>
              )}
            </div>
          </aside>
        </div>
      </article>
    </MainLayout>
  )
}
----------------------------------------

File:   _document.js

import { Html, Head, Main, NextScript } from 'next/document'

export default function Document() {
  return (
    <Html lang="en">
      <Head>
        <link 
          href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" 
          rel="stylesheet" 
        />
      </Head>
      <body>
        <Main />
        <NextScript />
      </body>
    </Html>
  )
}
----------------------------------------

File:   index.js

import Head from 'next/head';
import Link from 'next/link';
import { useState } from 'react';
import { motion } from 'framer-motion';
import Header from '../components/Header';
import Footer from '../components/Footer';
import ContactEnrichmentForm from '../components/ContactEnrichmentForm';
import { 
  Search, 
  Zap, 
  Shield, 
  Database,
  Users,
  Mail,
  Phone,
  Building2,
  ArrowRight,
  Check,
  Star,
  MessageCircle,
  Sparkles,
  Target,
  Clock,
  DollarSign,
  Link as LinkIcon,
  BarChart,
  Globe
} from 'lucide-react';

export default function Home() {
  // State for interactive elements
  const [videoPlaying, setVideoPlaying] = useState(false);
  const [activeFeature, setActiveFeature] = useState(null);

  return (
    <div className="min-h-screen bg-white font-sans antialiased">
      {/* Enhanced SEO & Meta Tags */}
      <Head>
        <title>Data Forge | Find & Verify Business Decision Makers | 98% Accurate</title>
        <meta name="description" content="Access 200M+ verified decision-maker contacts. Get direct emails, phones & insights with 98%  deliverability. Start free - 50 monthly credits, no card needed." />
        <meta name="viewport" content="width=device-width, initial-scale=1" />

        {/* OpenGraph Tags */}
        <meta property="og:type" content="website" />
        <meta property="og:url" content="https://app.dataforge.so" />
        <meta property="og:title" content="Data Forge | B2B Contact Intelligence Platform" />
        <meta property="og:description" content="Transform cold outreach into warm conversations with verified decision-maker data. 98%  deliverability." />
        <meta property="og:image" content="https://app.dataforge.so/og-image.png" />

        {/* Twitter Tags */}
        <meta name="twitter:card" content="summary_large_image" />
        <meta name="twitter:site" content="@dataforge" />

        {/* Rich Snippets */}
        <script type="application/ld+json">
          {JSON.stringify({
            "@context": "https://schema.org",
            "@type": "SaaSSolution",
            "name": "Data Forge",
            "description": "B2B contact intelligence platform with 98%  deliverability",
            "offers": {
              "@type": "Offer",
              "price": "0",
              "priceCurrency": "USD",
              "description": "Free plan with 50 monthly credits"
            },
            "aggregateRating": {
              "@type": "AggregateRating",
              "ratingValue": "4.9",
              "reviewCount": "2000"
            }
          })}
        </script>

        {/* Canonical URL */}
        <link rel="canonical" href="https://app.dataforge.so" />
      </Head>

      <Header />

      <main>
        {/* Hero Section - Problem → Solution → Action */}
        <section className="relative py-24 overflow-hidden">
          {/* Geometric Background Pattern */}
          <div className="absolute inset-0">
            <div className="absolute inset-0 bg-gradient-to-b from-gray-50 to-white" />
            <div className="absolute inset-0 bg-[linear-gradient(to_right,transparent_1px,white_1px),linear-gradient(to_bottom,transparent_1px,white_1px)] bg-[size:4rem_4rem] [mask-image:radial-gradient(ellipse_60%_50%_at_50%_0%,black,transparent)]" />
          </div>

          <div className="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="grid lg:grid-cols-2 gap-12 items-center">
              {/* Left Column - Value Proposition */}
              <motion.div 
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5 }}
                className="max-w-xl"
              >
                {/* Trust Badge - Instant Value Proposition */}
                <div className="inline-flex items-center px-3 py-1 rounded-full bg-emerald-50 text-emerald-600 text-sm font-medium mb-6">
                  <Sparkles className="w-4 h-4 mr-2" />
                  98% Deliverability
                </div>

                {/* Main Value Proposition */}
                <h1 className="text-4xl sm:text-5xl font-bold tracking-tight text-gray-900 mb-4">
                  Find & Connect with{' '}
                  <span className="text-emerald-600">Decision Makers</span>
                  <span className="block text-xl sm:text-2xl font-normal text-gray-600 mt-4">
                    Turn cold outreach into warm conversations with verified data
                  </span>
                </h1>

                {/* Clear Benefit Statement */}
                <p className="text-lg text-gray-600 mb-8">
                  Access 200M+ verified business contacts. Get direct dials, 
                  emails, and insights to reach the right people, right now.
                </p>

                {/* Key Benefits - Problem Solvers */}
                <div className="space-y-4 mb-8">
                  {[
                    "Find emails & phones directly from LinkedIn profiles",
                    "Enrich entire contact lists in bulk",
                    "Chrome extension for instant enrichment"
                  ].map((benefit, index) => (
                    <div key={index} className="flex items-start">
                      <div className="flex-shrink-0 h-6 w-6 rounded-full bg-emerald-50 flex items-center justify-center">
                        <Check className="h-4 w-4 text-emerald-600" />
                      </div>
                      <span className="ml-3 text-gray-600">{benefit}</span>
                    </div>
                  ))}
                </div>

                {/* Primary CTA with Value Stack */}
                <div className="space-y-4">
                  <Link href="https://app.dataforge.so">
                    <a className="inline-flex items-center px-6 py-3 text-lg font-medium text-white bg-emerald-600 hover:bg-emerald-700 rounded-lg transition duration-150 ease-in-out shadow-lg shadow-emerald-600/20 hover:shadow-xl hover:shadow-emerald-600/30">
                      Get Started Free
                      <ArrowRight className="ml-2 h-5 w-5 group-hover:translate-x-1 transition-transform" />
                    </a>
                  </Link>
                  <p className="text-sm text-gray-500">
                    ✨ Free forever plan includes 50 credits/month • No credit card needed
                  </p>
                </div>

              </motion.div>

              {/* Right Column - Interactive Demo */}
              <motion.div
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.2, duration: 0.5 }}
                className="relative"
              >
                <div className="bg-white rounded-xl shadow-xl border border-gray-200 p-6">
                  {/* Success Indicator */}
                  <div className="absolute -top-3 -right-3">
                    <span className="inline-flex items-center px-3 py-1 rounded-full bg-emerald-600 text-white text-sm font-medium">
                      <Sparkles className="w-4 h-4 mr-1" />
                      Try it free
                    </span>
                  </div>
                  <ContactEnrichmentForm />
                </div>
              </motion.div>
            </div>
          </div>
        </section>

        {/* Enhanced Social Proof Section */}
        <section className="py-12 border-y border-notion-border bg-white">
          <div className="max-w-7xl mx-auto px-4">
            <div className="flex flex-col md:flex-row items-center justify-between gap-8">
              <div className="flex items-center space-x-4">
                <Star className="w-6 h-6 text-yellow-400" />
                <div className="text-[16px] font-medium">
                     <span className="text-notion-gray ml-2">Trusted by fast-growing teams from:</span>
                </div>
              </div>

              {/* Enhanced Logo Section */}
              <div className="flex items-center space-x-12">
                {/* Added Premium Brand Logos */}
                <div className="grid grid-cols-6 gap-12">
                  {[
                    { name: "Notion", color: "text-blue-500" },
                    { name: "Figma", color: "text-red-500" },
                    { name: "Linear", color: "text-blue-600" },
                    { name: "Vercel", color: "text-red-600" },
                    { name: "Railway", color: "text-blue-700" },
                    { name: "Retool", color: "text-blue-800" }
                  ].map((company, index) => (
                    <div 
                      key={index}
                      className="flex items-center justify-center grayscale hover:grayscale-0 transition-all duration-300"
                    >
                      <span className={`text-[18px] font-bold ${company.color}`}>
                        {company.name}
                      </span>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>
        </section>

        {/* Enhanced Features Grid */}
        <section className="py-20 bg-notion-hover">
          <div className="max-w-6xl mx-auto px-4">
            <div className="text-center mb-16">
              <h2 className="text-[32px] font-bold tracking-tight mb-4">
                Everything you need to supercharge your outreach
              </h2>
              <p className="text-notion-gray text-[18px] max-w-2xl mx-auto">
                Get comprehensive contact data and insights to connect with 
                decision-makers at scale
              </p>
            </div>

            <div className="grid md:grid-cols-3 gap-8">
              {[
                {
                  icon: Mail,
                  title: "Smart Email Finder",
                  description: "Get verified business emails with pattern recognition & multi-source validation",
                  features: [
                    "99.9% deliverability",
                    "Format prediction",
                    "Bulk verification"
                  ]
                },
                {
                  icon: Phone,
                  title: "Direct Dial Intelligence",
                  description: "Access direct numbers and mobile phones of key decision makers",
                  features: [
                    "Mobile & direct lines",
                    "International coverage",
                    "Real-time validation"
                  ]
                },
                {
                  icon: Building2,
                  title: "Rich Company Data",
                  description: "Get comprehensive insights about target companies",
                  features: [
                    "Tech stack data",
                    "Employee counts",
                    "Revenue insights"
                  ]
                },
                {
                  icon: Shield,
                  title: "Enterprise Security",
                  description: "Bank-grade security with complete data protection",
                  features: [
                    "SOC 2 Type II",
                    "GDPR compliant",
                    "Data encryption"
                  ]
                },
                {
                  icon: Database,
                  title: "Bulk Enrichment",
                  description: "Process thousands of contacts simultaneously",
                  features: [
                    "CSV upload/export",
                    "API access",
                    "Duplicate detection"
                  ]
                },
                {
                  icon: Users,
                  title: "Team Features",
                  description: "Collaborate effectively across your organization",
                  features: [
                    "Shared credits",
                    "Activity tracking",
                    "Role management"
                  ]
                }
              ].map((feature, index) => (
                <motion.div
                  key={index}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.2 * index, duration: 0.6 }}
                  className="bg-white p-8 rounded-xl shadow-sm hover:shadow-xl transition-all duration-200 group"
                >
                  <div className="w-12 h-12 rounded-lg bg-emerald-pool/10 flex items-center justify-center mb-6">
                    <feature.icon className="w-6 h-6 text-emerald-pool" />
                  </div>

                  <h3 className="text-[20px] font-semibold mb-3 group-hover:text-emerald-pool transition-colors">
                    {feature.title}
                  </h3>

                  <p className="text-notion-gray text-[16px] mb-6">
                    {feature.description}
                  </p>

                  <ul className="space-y-3">
                    {feature.features.map((item, fIndex) => (
                      <li key={fIndex} className="flex items-center text-[14px] text-notion-gray">
                        <Check className="w-4 h-4 text-emerald-pool mr-2 flex-shrink-0" />
                        <span>{item}</span>
                      </li>
                    ))}
                  </ul>
                </motion.div>
              ))}
            </div>
          </div>
        </section>


        {/* How It Works Section */}
        <section className="py-20 relative overflow-hidden">
          {/* Large transparent background numbers */}
          <div className="absolute inset-0 flex justify-between items-center px-20 pointer-events-none">
            {['01', '02', '03'].map((num, index) => (
              <span 
                key={num}
                className="text-[200px] font-bold text-emerald-pool/5 select-none"
                style={{
                  transform: `translateX(${(index - 1) * 20}px)`,
                }}
              >
                {num}
              </span>
            ))}
          </div>

          <div className="max-w-6xl mx-auto px-4 relative">
            <div className="text-center mb-16">
              <h2 className="text-[32px] font-bold tracking-tight mb-4">
                How Data Forge Works
              </h2>
              <p className="text-notion-gray text-[18px] max-w-2xl mx-auto">
                Get started with our simple three-step process to enhance your contact data
              </p>
            </div>

            <div className="grid md:grid-cols-3 gap-8">
              {[
                {
                  number: "01",
                  title: "Input Your Data",
                  description: "Enter the information you have about your contacts or target companies.",
                  icon: Search,
                  color: "bg-daring-indigo",
                  features: [
                    "Single contact lookup",
                    "Bulk upload via CSV",
                    "API integration"
                  ]
                },
                {
                  number: "02",
                  title: "We Enrich Your Data",
                  description: "Our system searches multiple reliable sources to find and verify contact information.",
                  icon: Database,
                  color: "bg-parfait",
                  features: [
                    "Real-time verification",
                    "Multi-source validation",
                    "AI-powered matching"
                  ]
                },
                {
                  number: "03",
                  title: "Get Updated Results",
                  description: "Receive accurate, up-to-date contact details ready for your outreach campaigns.",
                  icon: Check,
                  color: "bg-emerald-pool",
                  features: [
                    "Verified email addresses",
                    "Direct phone numbers",
                    "Company insights"
                  ]
                }
              ].map((step, index) => (
                <motion.div
                  key={index}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.2 * index, duration: 0.6 }}
                  className="relative"
                >
                  {/* Card */}
                  <div className="bg-white rounded-lg border border-notion-border p-8 h-full hover:shadow-lg transition-all duration-200 group">
                    {/* Step Number */}
                    <div className="flex items-center space-x-4 mb-6">
                      <div className={`w-12 h-12 rounded-lg ${step.color} bg-opacity-10 flex items-center justify-center`}>
                        <span className={`text-xl font-bold ${step.color.replace('bg-', 'text-')}`}>
                          {step.number}
                        </span>
                      </div>
                      <step.icon className={`w-6 h-6 ${step.color.replace('bg-', 'text-')}`} />
                    </div>

                    {/* Content */}
                    <h3 className="text-[20px] font-semibold mb-3 group-hover:text-emerald-pool transition-colors">
                      {step.title}
                    </h3>
                    <p className="text-notion-gray text-[16px] mb-6">
                      {step.description}
                    </p>

                    {/* Features */}
                    <ul className="space-y-3">
                      {step.features.map((feature, fIndex) => (
                        <li key={fIndex} className="flex items-center text-[14px] text-notion-gray">
                          <Check className="w-4 h-4 text-emerald-pool mr-2 flex-shrink-0" />
                          <span>{feature}</span>
                        </li>
                      ))}
                    </ul>

                    {/* Connect lines between cards on desktop */}
                    {index < 2 && (
                      <div className="hidden md:block absolute top-1/2 -right-4 w-8 border-t-2 border-dashed border-notion-border" />
                    )}
                  </div>
                </motion.div>
              ))}
            </div>

            {/* Bottom CTA */}
            <div className="mt-12 text-center">
              <motion.button
                className="inline-flex items-center px-6 py-3 bg-emerald-pool hover:bg-emerald-pool/90 text-white rounded-lg text-[16px] font-medium transition-colors group"
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
              >
                Start Enriching Your Data
                <ArrowRight className="ml-2 w-4 h-4 group-hover:translate-x-1 transition-transform" />
              </motion.button>
            </div>
          </div>
        </section>



        {/* Stats Section - Proof of Scale */}
        <section className="py-16 bg-gray-50">
          <div className="max-w-7xl mx-auto px-4">
            <div className="grid grid-cols-2 md:grid-cols-4 gap-8">
              {[
                {
                  number: "200M+",
                  label: "Verified Contacts",
                  icon: Users,
                  bgColor: "bg-emerald-pool/10",
                  textColor: "text-emerald-pool",
                  borderColor: "border-emerald-pool/20"
                },
                {
                  number: "98%",
                  label: "Deliverability Rate",
                  icon: Target,
                  bgColor: "bg-daring-indigo/10",
                  textColor: "text-daring-indigo",
                  borderColor: "border-daring-indigo/20"
                },
                {
                  number: "50+",
                  label: "Data Points per Contact",
                  icon: Database,
                  bgColor: "bg-puturple/10",
                  textColor: "text-puturple",
                  borderColor: "border-puturple/20"
                },
                {
                  number: "Real-time",
                  label: "Verification",
                  icon: Zap,
                  bgColor: "bg-parfait/10",
                  textColor: "text-parfait",
                  borderColor: "border-parfait/20"
                }
              ].map((stat, index) => (
                <motion.div 
                  key={index}
                  initial={{ opacity: 0, y: 20 }}
                  whileInView={{ opacity: 1, y: 0 }}
                  viewport={{ once: true }}
                  transition={{ delay: index * 0.1 }}
                  className="relative group"
                >
                  <div className="text-center p-6 rounded-xl bg-white border transition-all duration-200 hover:shadow-lg">
                    <div className={`inline-flex items-center justify-center w-14 h-14 rounded-lg ${stat.bgColor} mb-4 group-hover:scale-110 transition-transform duration-200`}>
                      <stat.icon className={`w-7 h-7 ${stat.textColor}`} />
                    </div>
                    <div className={`text-2xl md:text-3xl font-bold ${stat.textColor} mb-2`}>
                      {stat.number}
                    </div>
                    <div className="text-sm md:text-base text-napoleon">
                      {stat.label}
                    </div>
                  </div>
                  {/* Subtle border accent on hover */}
                  <div className={`absolute inset-0 rounded-xl border-2 ${stat.borderColor} opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none`} />
                </motion.div>
              ))}
            </div>
          </div>
        </section>


        {/* I'll continue with the features, pricing, and final CTA sections... */}

        {/* Key Benefits Section */}
                <section className="py-20 bg-gray-50">
                  <div className="max-w-7xl mx-auto px-4">
                    <div className="text-center mb-16">
                      <h2 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
                        Why teams love Data Forge
                      </h2>
                      <p className="text-lg text-gray-600 max-w-2xl mx-auto">
                        Transform your outreach workflow with powerful data enrichment tools
                      </p>
                    </div>

                    <div className="grid md:grid-cols-3 gap-8">
                      {[
                        {
                          title: "Save Hours Daily",
                          description: "Stop manual research. Get verified contact data instantly for individuals or entire lists.",
                          icon: Clock,
                          benefits: [
                            "Instant LinkedIn enrichment",
                            "Bulk list processing",
                            "Browser extension"
                          ],
                          color: "emerald"
                        },
                        {
                          title: "Increase Response Rates",
                          description: "Reach the right person with accurate, verified contact information.",
                          icon: BarChart,
                          benefits: [
                            "98% email deliverability",
                            "Direct dial numbers",
                            "Role verification"
                          ],
                          color: "blue"
                        },
                        {
                          title: "Scale Your Outreach",
                          description: "Automate your prospecting workflow with powerful tools and integrations.",
                          icon: Zap,
                          benefits: [
                            "API access",
                            "CRM integration",
                            "Export capabilities"
                          ],
                          color: "purple"
                        }
                      ].map((benefit, index) => (
                        <motion.div
                          key={index}
                          initial={{ opacity: 0, y: 20 }}
                          whileInView={{ opacity: 1, y: 0 }}
                          viewport={{ once: true }}
                          transition={{ delay: index * 0.2 }}
                          className="bg-white rounded-xl border border-gray-200 p-8 hover:shadow-lg transition-all duration-200"
                        >
                          <div className={`w-12 h-12 rounded-lg bg-${benefit.color}-50 flex items-center justify-center mb-6`}>
                            <benefit.icon className={`w-6 h-6 text-${benefit.color}-600`} />
                          </div>

                          <h3 className="text-xl font-semibold text-gray-900 mb-3">
                            {benefit.title}
                          </h3>

                          <p className="text-gray-600 mb-6">
                            {benefit.description}
                          </p>

                          <ul className="space-y-3">
                            {benefit.benefits.map((item, bIndex) => (
                              <li key={bIndex} className="flex items-center text-gray-600">
                                <Check className={`w-5 h-5 text-${benefit.color}-600 mr-2 flex-shrink-0`} />
                                <span>{item}</span>
                              </li>
                            ))}
                          </ul>
                        </motion.div>
                      ))}
                    </div>
                  </div>
                </section>

                {/* Enhanced Testimonials Section */}
                <section className="py-20 bg-notion-hover">
                  <div className="max-w-7xl mx-auto px-4">
                    <div className="text-center mb-16">
                      <h2 className="text-[32px] font-bold tracking-tight mb-4">
                        Trusted by sales leaders worldwide
                      </h2>
                      <p className="text-notion-gray text-[18px] max-w-2xl mx-auto">
                        Join thousands of teams using Data Forge to supercharge their outreach
                      </p>
                    </div>

                    <div className="grid grid-cols-12 gap-6">
                      {[
                        {
                          quote: "Data Forge transformed our outreach strategy. We've seen a 3x increase in response rates and saved countless hours on manual research.",
                          author: "Sarah Chen",
                          title: "Head of Sales",
                          company: "TechCorp",
                          size: "col-span-12 md:col-span-8",
                          color: "bg-daring-indigo"
                        },
                        {
                          quote: "The accuracy of the data is incredible. No more bounced emails or wrong numbers.",
                          author: "Michael Rodriguez",
                          title: "SDR Manager",
                          company: "GrowthAI",
                          size: "col-span-12 md:col-span-4",
                          color: "bg-parfait"
                        },
                        {
                          quote: "Easy to use, fantastic support, and great value. A must-have for any B2B sales team.",
                          author: "Emma Watson",
                          title: "Revenue Operations",
                          company: "CloudScale",
                          size: "col-span-12 md:col-span-4",
                          color: "bg-puturple"
                        },
                        {
                          quote: "We've cut our prospecting time in half and improved our connection rate by 40%. The ROI is phenomenal.",
                          author: "David Park",
                          title: "VP Sales",
                          company: "SalesPro",
                          size: "col-span-12 md:col-span-8",
                          color: "bg-emerald-pool"
                        }
                      ].map((testimonial, index) => (
                        <motion.div 
                          key={index}
                          className={`${testimonial.size} group`}
                          initial={{ opacity: 0, y: 20 }}
                          animate={{ opacity: 1, y: 0 }}
                          transition={{ delay: 0.2 * index, duration: 0.6 }}
                        >
                          <div className={`h-full ${testimonial.color} rounded-xl p-8 hover:shadow-xl transition-all duration-200`}>
                            <div className="flex flex-col h-full">
                              <div className="flex-grow">
                                <p className="text-[18px] text-white mb-6 leading-relaxed">
                                  "{testimonial.quote}"
                                </p>
                              </div>
                              <div className="mt-6 pt-6 border-t border-white/10">
                                <div className="flex items-center">
                                  <div className="h-12 w-12 rounded-full bg-white/10 flex items-center justify-center text-white font-medium text-lg">
                                    {testimonial.author.charAt(0)}
                                  </div>
                                  <div className="ml-4">
                                    <p className="font-medium text-white">{testimonial.author}</p>
                                    <p className="text-[14px] text-white/80">{testimonial.title}, {testimonial.company}</p>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                        </motion.div>
                      ))}
                    </div>
                  </div>
                </section>


                {/* Final CTA Section */}
                <section className="py-20 bg-gray-900 text-white">
                  <div className="max-w-4xl mx-auto px-4 text-center">
                    <motion.div
                      initial={{ opacity: 0, y: 20 }}
                      whileInView={{ opacity: 1, y: 0 }}
                      viewport={{ once: true }}
                    >
                      <div className="inline-flex items-center px-4 py-2 rounded-full bg-emerald-500/20 text-emerald-400 text-sm font-medium mb-8">
                        <Sparkles className="w-4 h-4 mr-2" />
                        Get 50 free credits every month
                      </div>

                      <h2 className="text-4xl font-bold mb-6">
                        Ready to supercharge your prospecting?
                      </h2>

                      <p className="text-xl text-gray-300 mb-8">
                        Join thousands of teams using Data Forge to find and connect with decision-makers
                      </p>

                      <div className="flex flex-col items-center space-y-6">
                        <Link href="https://app.dataforge.so">
                          <a className="inline-flex items-center px-8 py-4 bg-emerald-600 hover:bg-emerald-700 text-white rounded-lg text-lg font-medium transition-all duration-200 group">
                            Start Free
                            <ArrowRight className="ml-2 w-5 h-5 group-hover:translate-x-1 transition-transform" />
                          </a>
                        </Link>

                        <div className="flex items-center justify-center gap-8 text-sm text-gray-400">
                          <div className="flex items-center">
                            <Check className="w-4 h-4 text-emerald-400 mr-2" />
                            No credit card required
                          </div>
                          <div className="flex items-center">
                            <Check className="w-4 h-4 text-emerald-400 mr-2" />
                            50 free credits monthly
                          </div>
                          <div className="flex items-center">
                            <Check className="w-4 h-4 text-emerald-400 mr-2" />
                            98% accuracy 
                          </div>
                        </div>
                      </div>
                    </motion.div>
                  </div>
                </section>
              </main>

              <Footer />
            </div>
          );
        }
----------------------------------------

File:   pricing.js

// File: pages/pricing.js
import { useState } from 'react';
import { Check } from 'lucide-react';
import Header from '../components/Header';
import Footer from '../components/Footer';

export default function PricingPage() {
  const [billingCycle, setBillingCycle] = useState('monthly');

  const plans = [
    {
      name: 'Free',
      price: 0,
      credits: 50,
      description: 'Perfect for trying out Data Forge',
      features: [
        'Email Finder',
        'Email Verification',
        'Domain Search',
        'LinkedIn Profile Enrichment',
        'Phone Number Lookup',
        'Basic Support'
      ]
    },
    {
      name: 'Starter',
      price: 39,
      credits: 1000,
      description: 'Great for small teams and startups',
      features: [
        'Everything in Free, plus:',
        'Bulk Email Processing',
        'Company Email Pattern Detection',
        'API Access',
        'Priority Support'
      ]
    },
    {
      name: 'Pro',
      price: 79,
      credits: 2500,
      description: 'For growing businesses',
      features: [
        'Everything in Starter, plus:',
        'Higher API Rate Limits',
        'Dedicated Account Manager',
        'Custom Contracts Available'
      ]
    }
  ];

  const faqs = [
    {
      question: 'How do credits work?',
      answer: 'Credits are consumed when you perform actions like email finding or verification. Different actions consume different amounts of credits. Unused credits roll over to the next month.'
    },
    {
      question: 'Can I upgrade or downgrade my plan?',
      answer: "Yes, you can change your plan at any time. When upgrading, you'll be prorated for the remainder of the billing cycle. When downgrading, the new rate will apply to your next billing cycle."
    },
    {
      question: 'Do credits expire?',
      answer: 'Credits roll over month to month as long as you maintain an active paid subscription. Free plan credits expire at the end of each month.'
    },
    {
      question: 'What happens if I run out of credits?',
      answer: 'You can purchase additional credits at any time, or upgrade to a higher plan with more credits included.'
    }
  ];

  const testimonials = [
    {
      quote: "Data Forge has transformed how we find and verify prospect information. The accuracy is incredible.",
      author: "Sarah Chen",
      title: "Head of Sales, TechCorp",
      company: "TechCorp"
    },
    {
      quote: "The credit system is transparent and fair. We always know exactly what we're using and why.",
      author: "Michael Rodriguez",
      title: "Growth Manager",
      company: "SalesFlow Inc"
    }
  ];

  return (
    <div className="min-h-screen bg-white">
      <Header />

      <main className="py-20">
        {/* Pricing Header */}
        <div className="text-center mb-12">
          <h1 className="text-4xl font-bold text-daring-indigo mb-4">Simple, Transparent Pricing</h1>
          <p className="text-xl text-napoleon">Choose the plan that's right for you</p>
        </div>

        {/* Billing Toggle */}
        <div className="flex justify-center mb-12">
          <div className="bg-gray-100 p-1 rounded-lg inline-flex">
            <button
              onClick={() => setBillingCycle('monthly')}
              className={`px-4 py-2 rounded-md ${
                billingCycle === 'monthly' 
                  ? 'bg-white shadow-sm text-emerald-pool' 
                  : 'text-gray-500'
              }`}
            >
              Monthly
            </button>
            <button
              onClick={() => setBillingCycle('annual')}
              className={`px-4 py-2 rounded-md ${
                billingCycle === 'annual' 
                  ? 'bg-white shadow-sm text-emerald-pool' 
                  : 'text-gray-500'
              }`}
            >
              Annual (Save 20%)
            </button>
          </div>
        </div>

        {/* Pricing Cards */}
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="grid md:grid-cols-3 gap-8">
            {plans.map((plan) => (
              <div 
                key={plan.name} 
                className={`${
                  plan.name === 'Pro' 
                    ? 'bg-gradient-to-b from-emerald-pool/5 to-white border-emerald-pool transform -translate-y-4 scale-105 z-10 mt-6' // Added mt-6 for extra space at top
                    : 'bg-white border-gray-200'
                } rounded-lg shadow-lg overflow-visible border relative transition-all duration-300 hover:shadow-xl`} // Changed overflow-hidden to overflow-visible
              >
                {plan.name === 'Pro' && (
                  <div className="absolute -top-5 left-1/2 transform -translate-x-1/2">
                    <span className="bg-emerald-pool text-white px-6 py-2 rounded-full text-sm font-medium shadow-lg whitespace-nowrap">
                      Most Popular
                    </span>
                  </div>
                )}
                <div className={`p-8 ${plan.name === 'Pro' ? 'pt-10' : 'pb-8'}`}> {/* Added more top padding for Pro plan */}
                  <h2 className="text-2xl font-bold text-daring-indigo">{plan.name}</h2>
                  <p className="text-napoleon mt-2 min-h-[48px]">{plan.description}</p>
                  <div className="mt-4">
                    <span className="text-5xl font-bold text-daring-indigo">
                      ${billingCycle === 'annual' ? Math.floor(plan.price * 0.8) : plan.price}
                    </span>
                    {plan.price > 0 && (
                      <span className="text-napoleon">
                        /month
                        {billingCycle === 'annual' && (
                          <span className="text-emerald-pool ml-2 text-sm">
                            (20% off)
                          </span>
                        )}
                      </span>
                    )}
                  </div>
                  <p className="text-emerald-pool font-semibold mt-2">
                    {plan.credits.toLocaleString()} credits/month
                  </p>

                  <div className="mt-8 space-y-4">
                    {plan.features.map((feature, index) => (
                      <div key={index} className="flex items-start">
                        <Check className={`h-5 w-5 mr-3 flex-shrink-0 ${
                          plan.name === 'Pro' ? 'text-emerald-pool' : 'text-emerald-pool/80'
                        }`} />
                        <span className="text-napoleon">{feature}</span>
                      </div>
                    ))}
                  </div>

                  <button 
                    onClick={() => window.location.href = 'https://app.dataforge.so'}
                    className={`mt-8 w-full py-3 px-4 rounded-lg transition duration-300 ${
                      plan.name === 'Pro'
                        ? 'bg-emerald-pool text-white hover:bg-emerald-pool/90 shadow-lg hover:shadow-xl'
                        : 'bg-emerald-pool/90 text-white hover:bg-emerald-pool'
                    }`}
                  >
                    Get Started
                  </button>
                </div>
              </div>
            ))}

            {/* Custom Plan Card */}
            <div className="md:col-span-3 bg-gradient-to-r from-emerald-pool to-daring-indigo text-white rounded-lg shadow-lg p-8 mt-8">
              <div className="text-center">
                <h2 className="text-2xl font-bold mb-4">Enterprise Custom Plan</h2>
                <p className="mb-6 max-w-2xl mx-auto">
                  Need more credits or custom features? Let's talk about a plan that's perfect for your business.
                </p>
                <button 
                  onClick={() => window.location.href = 'https://app.dataforge.so'}
                  className="bg-white text-emerald-pool py-3 px-8 rounded-lg hover:bg-opacity-90 transition duration-300 shadow-lg hover:shadow-xl"
                >
                  Contact Sales
                </button>
              </div>
            </div>
          </div>
        </div>

        {/* Credit System */}
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 mt-20">
          <h2 className="text-3xl font-bold text-center text-daring-indigo mb-12">How Credits Work</h2>
          <div className="bg-white rounded-xl shadow-lg p-8">
            <div className="grid gap-6">
              {[
                {
                  action: "Verified Email (Individual)",
                  credits: "2 credits",
                  description: "Find & verify individual email addresses"
                },
                {
                  action: "Verified Company Domain Emails",
                  credits: "2 credits each",
                  description: "Get verified email patterns for a company domain"
                },
                {
                  action: "LinkedIn Profile Enrichment",
                  credits: "1 credit",
                  description: "Enrich your data with LinkedIn information"
                },
                {
                  action: "Phone Number",
                  credits: "15 credits",
                  description: "Find verified phone numbers"
                },
                {
                  action: "Catch-all and Unverified Emails",
                  credits: "0 credits",
                  description: "Additional potential email formats"
                }
              ].map((item, index) => (
                <div 
                  key={index} 
                  className={`flex flex-col md:flex-row md:items-center justify-between p-6 rounded-lg transition-all ${
                    item.credits === "0 credits" 
                      ? "bg-gray-50"
                      : "bg-emerald-pool/5 hover:bg-emerald-pool/10"
                  }`}
                >
                  <div className="flex-grow">
                    <h3 className="text-lg font-semibold text-daring-indigo mb-1">
                      {item.action}
                    </h3>
                    <p className="text-napoleon text-sm">
                      {item.description}
                    </p>
                  </div>
                  <div className={`mt-4 md:mt-0 md:ml-8 ${
                    item.credits === "0 credits"
                      ? "text-napoleon"
                      : "text-emerald-pool font-semibold"
                  }`}>
                    {item.credits}
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>

        {/* Updated Testimonials Section */}
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mt-20">
          <h2 className="text-3xl font-bold text-center text-daring-indigo mb-12">What Our Customers Say</h2>
          <div className="grid grid-cols-12 gap-6">
            {[
              {
                quote: "Data Forge has transformed our lead generation process. The accuracy of the data is impressive, and the credit system is straightforward.",
                author: "Sarah Chen",
                title: "Head of Sales",
                company: "TechCorp",
                size: "col-span-12 md:col-span-8",
                color: "from-emerald-pool to-daring-indigo"
              },
              {
                quote: "The API integration was seamless, and the support team is incredibly responsive.",
                author: "Michael Rodriguez",
                title: "Growth Manager",
                company: "SalesFlow Inc",
                size: "col-span-12 md:col-span-4",
                color: "from-parfait to-puturple"
              },
              {
                quote: "We've seen a 40% improvement in our email campaign performance since using Data Forge.",
                author: "Emily Watson",
                title: "Marketing Director",
                company: "GrowthX",
                size: "col-span-12 md:col-span-4",
                color: "from-emerald-pool to-parfait"
              },
              {
                quote: "The LinkedIn enrichment feature has been a game-changer for our sales team's prospecting efforts.",
                author: "David Park",
                title: "Sales Operations",
                company: "ScaleUp Solutions",
                size: "col-span-12 md:col-span-8",
                color: "from-puturple to-daring-indigo"
              }
            ].map((testimonial, index) => (
              <div 
                key={index}
                className={`${testimonial.size} group`}
              >
                <div className={`h-full bg-gradient-to-br ${testimonial.color} rounded-xl shadow-sm hover:shadow-xl transition-all duration-300 p-8 transform hover:-translate-y-1`}>
                  <div className="flex flex-col h-full">
                    <div className="flex-grow">
                      <div className="text-4xl text-white/20 font-serif mb-4">"</div>
                      <p className="text-lg text-white leading-relaxed">
                        {testimonial.quote}
                      </p>
                    </div>
                    <div className="mt-6 pt-6 border-t border-white/10">
                      <div className="flex items-center">
                        <div className="h-10 w-10 rounded-full bg-white/10 flex items-center justify-center text-white font-semibold">
                          {testimonial.author.charAt(0)}
                        </div>
                        <div className="ml-3">
                          <p className="font-semibold text-white">{testimonial.author}</p>
                          <p className="text-sm text-white/80">{testimonial.title}, {testimonial.company}</p>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* FAQs */}
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 mt-20">
          <h2 className="text-3xl font-bold text-center text-daring-indigo mb-12">Frequently Asked Questions</h2>
          <div className="space-y-8">
            {faqs.map((faq, index) => (
              <div key={index} className="bg-white rounded-lg shadow-lg p-6">
                <h3 className="text-lg font-semibold text-daring-indigo mb-2">{faq.question}</h3>
                <p className="text-napoleon">{faq.answer}</p>
              </div>
            ))}
          </div>
        </div>
      </main>

      <Footer />
    </div>
  );
}
----------------------------------------

File: postcss.config.js

module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

----------------------------------------

Directory: public

File: README.md

Welcome to the NextJS base template bootstrapped using the `create-next-app`. This template supports TypeScript, but you can use normal JavaScript as well.

## Getting Started

Hit the run button to start the development server.

You can start editing the page by modifying `pages/index.tsx`. The page auto-updates as you edit the file.

[API routes](https://nextjs.org/docs/api-routes/introduction) can be accessed on `/api/hello`. This endpoint can be edited in `pages/api/hello.ts`.

The `pages/api` directory is mapped to `/api/*`. Files in this directory are treated as [API routes](https://nextjs.org/docs/api-routes/introduction) instead of React pages.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

## Productionizing your Next App

To make your next App run smoothly in production make sure to deploy your project with [Repl Deployments](https://docs.replit.com/hosting/deployments/about-deployments)!

You can also produce a production build by running `npm run build` and [changing the run command](https://docs.replit.com/programming-ide/configuring-repl#run) to `npm run start`.
# Data-Forge-Front

----------------------------------------

Directory: styles

File:   blog.css

/* File: styles/blog.css */
.blog-content {
  @apply max-w-none text-gray-800;

  /* Headings */
  h1, h2, h3, h4, h5, h6 {
    @apply font-bold text-gray-900 scroll-mt-24;
  }

  h1 {
    @apply text-4xl md:text-5xl leading-tight mt-12 mb-8;
  }

  h2 {
    @apply text-3xl leading-snug mt-12 mb-6;
  }

  h3 {
    @apply text-2xl leading-snug mt-8 mb-4;
  }

  h4 {
    @apply text-xl leading-snug mt-6 mb-4;
  }

  /* Paragraphs and spacing */
  p {
    @apply text-lg leading-relaxed mb-6;
  }

  /* Lists */
  ul, ol {
    @apply my-6 ml-6 space-y-2;
  }

  li {
    @apply text-lg leading-relaxed;
  }

  /* Blockquotes */
  blockquote {
    @apply pl-6 border-l-4 border-emerald-pool/30 my-8 italic text-gray-700;
  }

  /* Code blocks */
  pre {
    @apply bg-gray-50 rounded-lg p-4 my-6 overflow-x-auto;
  }

  code {
    @apply bg-gray-50 px-1.5 py-0.5 rounded text-sm font-mono;
  }

  /* Links */
  a {
    @apply text-emerald-pool hover:text-emerald-pool/80 underline-offset-2 transition-colors;
  }

  /* Images */
  img {
    @apply rounded-lg my-8;
  }

  /* Tables */
  table {
    @apply w-full my-8 border-collapse;
  }

  th, td {
    @apply border border-gray-200 px-4 py-2;
  }

  th {
    @apply bg-gray-50 font-semibold text-left;
  }

  /* Horizontal rule */
  hr {
    @apply my-12 border-gray-200;
  }
}

/* Article layout spacing */
.article-container {
  @apply max-w-4xl mx-auto px-4 sm:px-6 lg:px-8;
}

/* Article header */
.article-header {
  @apply mb-12 text-center;
}

/* Article meta */
.article-meta {
  @apply flex items-center justify-center space-x-4 text-sm text-gray-600;
}
----------------------------------------

File:   globals.css

/* File: styles/globals.css */

@tailwind base;
@tailwind components;
@tailwind utilities;

/* File: styles/globals.css */

/* Add these to your existing styles */
.ProseMirror {
  min-height: 200px;
  outline: none;
}

.ProseMirror > * + * {
  margin-top: 0.75em;
}

.ProseMirror ul,
.ProseMirror ol {
  padding: 0 1rem;
}

.ProseMirror h1,
.ProseMirror h2,
.ProseMirror h3,
.ProseMirror h4,
.ProseMirror h5,
.ProseMirror h6 {
  line-height: 1.1;
  font-weight: 600;
}

.ProseMirror blockquote {
  padding-left: 1rem;
  border-left: 2px solid #ddd;
}

.ProseMirror a {
  color: #346B6D;
  text-decoration: underline;
}
----------------------------------------

File:   Home.module.css

.container {
  padding: 0 2rem;
}

.main {
  min-height: 100vh;
  padding: 4rem 0;
  flex: 1;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.footer {
  display: flex;
  flex: 1;
  padding: 2rem 0;
  border-top: 1px solid #eaeaea;
  justify-content: center;
  align-items: center;
}

.footer a {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-grow: 1;
}

.title a {
  color: #0070f3;
  text-decoration: none;
}

.title a:hover,
.title a:focus,
.title a:active {
  text-decoration: underline;
}

.title {
  margin: 0;
  line-height: 1.15;
  font-size: 4rem;
}

.title,
.description {
  text-align: center;
}

.description {
  margin: 4rem 0;
  line-height: 1.5;
  font-size: 1.5rem;
}

.code {
  background: #fafafa;
  border-radius: 5px;
  padding: 0.75rem;
  font-size: 1.1rem;
  font-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono,
    Bitstream Vera Sans Mono, Courier New, monospace;
}

.grid {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-wrap: wrap;
  max-width: 800px;
}

.card {
  margin: 1rem;
  padding: 1.5rem;
  text-align: left;
  color: inherit;
  text-decoration: none;
  border: 1px solid #eaeaea;
  border-radius: 10px;
  transition: color 0.15s ease, border-color 0.15s ease;
  max-width: 300px;
}

.card:hover,
.card:focus,
.card:active {
  color: #0070f3;
  border-color: #0070f3;
}

.card h2 {
  margin: 0 0 1rem 0;
  font-size: 1.5rem;
}

.card p {
  margin: 0;
  font-size: 1.25rem;
  line-height: 1.5;
}

.logo {
  height: 1em;
  margin-left: 0.2rem;
}

@media (max-width: 600px) {
  .grid {
    width: 100%;
    flex-direction: column;
  }
}

----------------------------------------

File: tailwind.config.js

const defaultTheme = require('tailwindcss/defaultTheme')

module.exports = {
  content: [
    "./pages/**/*.{js,ts,jsx,tsx}",
    "./components/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        'daring-indigo': '#4B4E6D',
        'parfait': '#C6B3AB',
        'puturple': '#B2A7D1',
        'emerald-pool': '#346B6D',
        'napoleon': '#4A4A4A',
        'notion': {
          default: '#37352F',
          gray: '#787774',
          hover: '#F7F7F7',
          border: '#E6E6E6',
        }
      },
      fontFamily: {
        sans: ['Inter', ...defaultTheme.fontFamily.sans],
        display: ['Inter', ...defaultTheme.fontFamily.sans],
      },
      letterSpacing: {
        tighter: '-0.02em',
        tight: '-0.01em',
      }
    },
  },
  plugins: [
    require('@tailwindcss/typography'),
    require('@tailwindcss/forms'),
    require('@tailwindcss/aspect-ratio'),
    require('@tailwindcss/line-clamp'),
  ],
}
----------------------------------------

File: tsconfig.json

{
  "compilerOptions": {
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": false,
    "noEmit": true,
    "incremental": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "target": "es5",
    "forceConsistentCasingInFileNames": true
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts"
  ],
  "exclude": [
    "node_modules"
  ]
}

----------------------------------------

Directory: utils

File:   imageUpload.js

// File: utils/imageUpload.js
import { v4 as uuidv4 } from 'uuid'

export async function uploadImage(file, supabase) {
  const fileExt = file.name.split('.').pop()
  const fileName = `${uuidv4()}.${fileExt}`
  const filePath = `post-images/${fileName}`

  const { error: uploadError } = await supabase.storage
    .from('media')
    .upload(filePath, file)

  if (uploadError) {
    throw uploadError
  }

  const { data: { publicUrl } } = supabase.storage
    .from('media')
    .getPublicUrl(filePath)

  return publicUrl
}

// File: components/ImageUpload.js
import { useState } from 'react'
import { useSupabaseClient } from '@supabase/auth-helpers-react'
import { uploadImage } from '../utils/imageUpload'

export default function ImageUpload({ onUpload }) {
  const [uploading, setUploading] = useState(false)
  const supabase = useSupabaseClient()

  async function handleUpload(event) {
    try {
      setUploading(true)

      if (!event.target.files || event.target.files.length === 0) {
        throw new Error('You must select an image to upload.')
      }

      const file = event.target.files[0]
      const fileUrl = await uploadImage(file, supabase)
      onUpload(fileUrl)
    } catch (error) {
      alert(error.message)
    } finally {
      setUploading(false)
    }
  }

  return (
    <div>
      <label className="block text-sm font-medium text-gray-700">
        Featured Image
      </label>
      <div className="mt-1 flex items-center">
        <input
          type="file"
          accept="image/*"
          onChange={handleUpload}
          disabled={uploading}
          className="block w-full text-sm text-gray-500
            file:mr-4 file:py-2 file:px-4
            file:rounded-md file:border-0
            file:text-sm file:font-semibold
            file:bg-emerald-pool file:text-white
            hover:file:bg-opacity-90"
        />
        {uploading && <span className="ml-2">Uploading...</span>}
      </div>
    </div>
  )
}
----------------------------------------

File: next.config.js

// File: next.config.js

module.exports = {
  reactStrictMode: true,
}
----------------------------------------

File: postcss.config.js

module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

----------------------------------------

File: tailwind.config.js

const defaultTheme = require('tailwindcss/defaultTheme')

module.exports = {
  content: [
    "./pages/**/*.{js,ts,jsx,tsx}",
    "./components/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        'daring-indigo': '#4B4E6D',
        'parfait': '#C6B3AB',
        'puturple': '#B2A7D1',
        'emerald-pool': '#346B6D',
        'napoleon': '#4A4A4A',
        'notion': {
          default: '#37352F',
          gray: '#787774',
          hover: '#F7F7F7',
          border: '#E6E6E6',
        }
      },
      fontFamily: {
        sans: ['Inter', ...defaultTheme.fontFamily.sans],
        display: ['Inter', ...defaultTheme.fontFamily.sans],
      },
      letterSpacing: {
        tighter: '-0.02em',
        tight: '-0.01em',
      }
    },
  },
  plugins: [
    require('@tailwindcss/typography'),
    require('@tailwindcss/forms'),
    require('@tailwindcss/aspect-ratio'),
    require('@tailwindcss/line-clamp'),
  ],
}
----------------------------------------

File: tsconfig.json

{
  "compilerOptions": {
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": false,
    "noEmit": true,
    "incremental": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "target": "es5",
    "forceConsistentCasingInFileNames": true
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts"
  ],
  "exclude": [
    "node_modules"
  ]
}

----------------------------------------

File: package.json

{
  "name": "data-forge",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@heroicons/react": "^2.1.5",
    "@supabase/auth-helpers-nextjs": "^0.8.7",
    "@supabase/auth-helpers-react": "^0.4.2",
    "@supabase/supabase-js": "^2.45.6",
    "@tiptap/extension-highlight": "^2.9.1",
    "@tiptap/extension-image": "^2.9.1",
    "@tiptap/extension-link": "^2.9.1",
    "@tiptap/extension-subscript": "^2.9.1",
    "@tiptap/extension-superscript": "^2.9.1",
    "@tiptap/extension-table": "^2.9.1",
    "@tiptap/extension-table-cell": "^2.9.1",
    "@tiptap/extension-table-header": "^2.9.1",
    "@tiptap/extension-table-row": "^2.9.1",
    "@tiptap/extension-task-item": "^2.9.1",
    "@tiptap/extension-task-list": "^2.9.1",
    "@tiptap/extension-text-align": "^2.9.1",
    "@tiptap/extension-underline": "^2.9.1",
    "@tiptap/react": "^2.9.1",
    "@tiptap/starter-kit": "^2.9.1",
    "date-fns": "^2.30.0",
    "framer-motion": "^6.5.1",
    "lucide-react": "^0.263.1",
    "next": "12.3.4",
    "prosemirror-commands": "^1.5.2",
    "prosemirror-example-setup": "^1.2.3",
    "prosemirror-model": "^1.19.3",
    "prosemirror-schema-basic": "^1.2.2",
    "prosemirror-schema-list": "^1.4.1",
    "prosemirror-state": "^1.4.3",
    "prosemirror-view": "^1.31.8",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "uuid": "^9.0.1"
  },
  "devDependencies": {
    "@tailwindcss/aspect-ratio": "^0.4.2",
    "@tailwindcss/forms": "^0.5.9",
    "@tailwindcss/line-clamp": "^0.4.4",
    "@tailwindcss/typography": "^0.5.15",
    "@types/node": "22.7.5",
    "@types/react": "18.3.11",
    "autoprefixer": "^10.4.14",
    "eslint": "8.38.0",
    "eslint-config-next": "13.3.0",
    "postcss": "^8.4.21",
    "tailwindcss": "^3.3.1",
    "typescript": "5.6.3"
  }
}

----------------------------------------

File: README.md

Welcome to the NextJS base template bootstrapped using the `create-next-app`. This template supports TypeScript, but you can use normal JavaScript as well.

## Getting Started

Hit the run button to start the development server.

You can start editing the page by modifying `pages/index.tsx`. The page auto-updates as you edit the file.

[API routes](https://nextjs.org/docs/api-routes/introduction) can be accessed on `/api/hello`. This endpoint can be edited in `pages/api/hello.ts`.

The `pages/api` directory is mapped to `/api/*`. Files in this directory are treated as [API routes](https://nextjs.org/docs/api-routes/introduction) instead of React pages.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

## Productionizing your Next App

To make your next App run smoothly in production make sure to deploy your project with [Repl Deployments](https://docs.replit.com/hosting/deployments/about-deployments)!

You can also produce a production build by running `npm run build` and [changing the run command](https://docs.replit.com/programming-ide/configuring-repl#run) to `npm run start`.
# Data-Forge-Front

----------------------------------------

